package org.ulpmm.univrav.web;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.StringTokenizer;

import javax.naming.InitialContext;
import javax.naming.directory.DirContext;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.fileupload.servlet.ServletRequestContext;
import org.apache.commons.lang.WordUtils;
import org.ulpmm.univrav.dao.DaoException;
import org.ulpmm.univrav.dao.DatabaseImpl;
import org.ulpmm.univrav.dao.FileSystemImpl;
import org.ulpmm.univrav.dao.LdapAccessImpl;
import org.ulpmm.univrav.dao.UnivrDaoImpl;
import org.ulpmm.univrav.entities.Amphi;
import org.ulpmm.univrav.entities.Building;
import org.ulpmm.univrav.entities.Course;
import org.ulpmm.univrav.entities.Selection;
import org.ulpmm.univrav.entities.Slide;
import org.ulpmm.univrav.entities.Tag;
import org.ulpmm.univrav.entities.Teacher;
import org.ulpmm.univrav.entities.Univr;
import org.ulpmm.univrav.entities.User;
import org.ulpmm.univrav.service.ServiceImpl;


/**
 * The servlet of the application.
 * 
 * @author morgan
 *
 */
public class Application extends HttpServlet {

	/** Serial version */
	private static final long serialVersionUID = 1L;
	
	/** Instance of the service layer */
	private ServiceImpl service;
	
	/** Used to managed user sessions */
	private HttpSession session;
	
	/** The name of the bundle to search the corresponding language properties files */
	private static final String BUNDLE_NAME = "org.ulpmm.univrav.language.messages"; 
			
	/** The Url to access to the course on the Internet */
	private static String coursesUrl;
	
	/** The Url to access to the statistics generated by Webalizer */
	private static String statsUrl;
	/** The Url to access to the old statistics generated by Webalizer */
	private static String oldStatsUrl;
	
	/** The ftp folder */
	private static String ftpFolder;
	/** The courses folder */
	private static String coursesFolder; 
	/** The live folder */
	private static String liveFolder; 
	
	/** Default MP3 filename in the archive sent by the client */
	private static String defaultMp3File;
	/** Default Flash filename in the archive sent by the client */
	private static String defaultFlashFile;
	/** Default screenshots folder in the archive sent by the client */
	private static String defaultScreenshotsFolder;
	
	/** Copyright comment */
	private static String comment;
	
	/** IP address of the Flash Server for the video live */
	private static String flashServerIp;
			
	/** The RSS title */
	private static String rssTitle;
	/** The RSS name */
	private static String rssName;
	/** The RSS description */
	private static String rssDescription;
	/** The url of the server */
	private static String serverUrl;
	/** The url of the rss image */
	private static String rssImageUrl;
	/** the RSS category */
	private static String rssCategory;
	/** The url of the recorded interface */
	private static String recordedInterfaceUrl;
	/** The language */
	private static String language;
	
	/** The itunes author */
	private static String itunesAuthor;
	/** The itunes subtitle */
	private static String itunesSubtitle;
	/** The itunes summary */
	private static String itunesSummary;
	/** The itunes image */
	private static String itunesImage;
	/** The itunes category */
	private static String itunesCategory;
	/** The itunes keywords */
	private static String itunesKeywords;
	
	/** The numbers of last courses to display */
	private static int lastCourseNumber;
	/** The numbers of selection courses to display */
	private static int selectionCourseNumber;
	/** The numbers of collection courses to display */
	private static int collectionCourseNumber;
	/** The numbers of recorded courses to display */
	private static int recordedCourseNumber;
	
	/** The default style */
	private static String defaultStyle;
	
	/** The keyword to identify the tests to delete (genre is equal to this keyword) */
	private static String testKeyWord1;

	/** The keyword to identify the tests to hide (title begins with this keyword) */
	private static String testKeyWord2;
	/** The keyword to identify the tests to hide (title begins with this keyword) */
	private static String testKeyWord3;
	
	/** The client port for the Univ-R integration */
	private static int clientSocketPort;
	
	/** Admin email for notification */
	private static String adminEmail1;
	/** Admin email for notification */
	private static String adminEmail2;
	/** Admin email for notification */
	private static String adminEmail3;
	
	/** the url for cas logout */
	private static String casLogoutUrl;
	
	/** Additional document formats **/
	private static String addDocFormats;
	
	/** Link for support (help page) */
	private static String supportLink;
		
	/** Ldap base dn */
	private static String ldapBaseDn;

	/** ldap search filter */
	private static String ldapSearchFilter;
	
		
	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occurs
	 */
	public void init() throws ServletException {
		
		System.out.println("Univ-R AV : init method called");
		
		/* Gets an instance of the service layer */	
		service = new ServiceImpl();
		
		Properties p = new Properties();
		
		try {
			
			/* configuration parameters loading */
			
			p.load(new FileInputStream(getServletContext().getRealPath("/conf") + "/univrav.properties"));
			
			// The Url to access to the course on internet
			coursesUrl = p.getProperty("coursesUrl");
			
			// The Url to access to the statistics generated by Webalizer
			statsUrl = p.getProperty("statsUrl");
			oldStatsUrl = p.getProperty("oldStatsUrl");
			
			// Folders on the file system
			ftpFolder = p.getProperty("ftpFolder");
			coursesFolder = p.getProperty("coursesFolder");
			liveFolder = p.getProperty("liveFolder");
			
			// Default media filenames in the archive sent by the client
			defaultMp3File = p.getProperty("defaultMp3File");
			defaultFlashFile = p.getProperty("defaultFlashFile");
			defaultScreenshotsFolder = p.getProperty("defaultScreenshotsFolder");
			
			// Copyright comment
			comment = service.cleanString(p.getProperty("comment"));
			
			// IP address of the Flash Server for the video live
			flashServerIp = p.getProperty("flashServerIp");
						
						
			// The settings of the RSS files, of the permalien (interface flash) and of emails
			rssTitle = p.getProperty("rssTitle");
			rssName = p.getProperty("rssName");
			rssDescription = p.getProperty("rssDescription");
			serverUrl = p.getProperty("serverUrl");
			rssImageUrl = p.getProperty("rssImageUrl");
			rssCategory = p.getProperty("rssCategory");
			recordedInterfaceUrl = p.getProperty("recordedInterfaceUrl");
			language = p.getProperty("language");
			
			// The setting of the RSS files for iTunes
			itunesAuthor = p.getProperty("itunesAuthor");
			itunesSubtitle = p.getProperty("itunesSubtitle");
			itunesSummary = p.getProperty("itunesSummary");
			itunesImage = p.getProperty("itunesImage");
			itunesCategory = p.getProperty("itunesCategory");
			itunesKeywords = p.getProperty("itunesKeywords");
			
			// The numbers of courses to display at the same time
			lastCourseNumber = Integer.parseInt(p.getProperty("lastCourseNumber"));
			recordedCourseNumber = Integer.parseInt(p.getProperty("recordedCourseNumber"));
			selectionCourseNumber = Integer.parseInt(p.getProperty("selectionCourseNumber"));
			collectionCourseNumber = Integer.parseInt(p.getProperty("collectionCourseNumber"));
			
			
			// The keyword to identify the tests to delete (genre is equal to this keyword)
			testKeyWord1 = p.getProperty("testKeyWord1");

			// The keyword to identify the tests to hide (title begins with this keyword)
			testKeyWord2 = p.getProperty("testKeyWord2");
			testKeyWord3 = p.getProperty("testKeyWord3");
			
			// The default style
			defaultStyle = p.getProperty("defaultStyle");
			
			// The client port for the Univ-R integration
			clientSocketPort = Integer.parseInt(p.getProperty("clientSocketPort"));
			
			// Admin email for notification
			adminEmail1 = p.getProperty("adminEmail1");
			adminEmail2 = p.getProperty("adminEmail2");
			adminEmail3 = p.getProperty("adminEmail3");
			
			//cas logout url
			casLogoutUrl = p.getProperty("casLogoutUrl");
			
			//add doc formats
			addDocFormats = p.getProperty("addDocFormats");
			
			// Link for support (help page)
			supportLink = p.getProperty("supportLink");
			
			/* ldap properties */
			ldapBaseDn = p.getProperty("ldapBaseDn");
			ldapSearchFilter = p.getProperty("ldapSearchFilter");
										
			/* Datasource retrieving */
			
			InitialContext cxt = new InitialContext();
			if ( cxt == null ) {
			   throw new Exception("No context found!");
			}

			DataSource ds = (DataSource) cxt.lookup( "java:/comp/env/jdbc/postgres" );

			if ( ds == null ) {
			   throw new Exception("Data source not found!");
			}
				
			DirContext dc=null;
			try {
				dc = (DirContext) cxt.lookup("java:comp/env/ldap/ox"); 
			}
			catch (Exception e) {
				 e.printStackTrace();
			}
			
					
			/* Creates the instances of the data access layer */
			
			DatabaseImpl db = new DatabaseImpl(ds);
			FileSystemImpl fs = new FileSystemImpl(
					getServletContext().getRealPath("/") + "scripts",
					ftpFolder, coursesFolder, liveFolder, coursesUrl,
					defaultMp3File, defaultFlashFile, defaultScreenshotsFolder, comment
			);
			UnivrDaoImpl ud = new UnivrDaoImpl();
			LdapAccessImpl ldap = new LdapAccessImpl(
					dc,
					ldapBaseDn,
					ldapSearchFilter
			);
		
			
			
			/* Links the data access layer to the service layer */
			
			service.setDb(db);
			service.setFs(fs);
			service.setUd(ud);
			service.setLdap(ldap);
			
			
			/* Creation of the RSS files */
			
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor, itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);
			
		}
		catch( IOException e) {
			System.out.println("Impossible to find the configuration file");
			e.printStackTrace();
			destroy();
		}
		catch( DaoException de) {
			de.printStackTrace();
			destroy();
		}
		catch( Exception e) {
			e.printStackTrace();
			destroy();
		}
	}
	
	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		/* Sets the character encoding as UTF-8 */
		request.setCharacterEncoding("UTF-8");

		/* Retrieves the current session or creates a new one if no session exists */
		session = request.getSession(true);
		
		String style = null;
		String language = null;
		
		/* If the session didn't exist and has just been created */
		if( session.isNew() || session.getAttribute("session")==null) {
			
			//Boolean to know if the session is validate
			session.setAttribute("session", true);
			
			/* Checks if the style and language are stored in the cookies */
			
			Cookie[] cookies = request.getCookies();
			
			// If the browser has not disabled cookies ...
			if( cookies != null ) {
				for(int i=0 ; i<cookies.length ; i++) {
					String cookieName = cookies[i].getName();
					if( cookieName.equals("style") )
						style=cookies[i].getValue();
					else if( cookieName.equals("language") ) 
						language = cookies[i].getValue();
				}
			}
			
			/* If not, store the default values in the cookies */
			
			if( style == null || style.equals("style1") || style.equals("style2")) {
				style = defaultStyle;
				Cookie styleCookie = new Cookie("style", style);
				styleCookie.setMaxAge(31536000);
				response.addCookie(styleCookie);
			}
			
			if( language == null ){
				language = request.getLocale().getLanguage();
				Cookie languageCookie = new Cookie("language", language);
				languageCookie.setMaxAge(31536000);
				response.addCookie(languageCookie);
			}
			
			/* Store them in the session */
			session.setAttribute("style", style);
			session.setAttribute("language", language);
			
			// Button disconnect
			session.setAttribute("btnDeco", false);		
		}
								
		/* Retrieves the path info from the browser's URL */
		String page = request.getPathInfo();
		
		if( page == null )
			page = "/home";
		
		if( page.equals("/home"))
			displayHomePage(request, response);
		else if (page.equals("/authentication_cas")) 
			authenticationCas(request,response);
		else if (page.equals("/authentication")) 
			authentication(request,response);
		else if (page.equals("/myspace_home")) 
			displayMyspace(request,response);
		else if(page.equals("/logout")) 
			logout(request,response);
		else if(page.equals("/publication")) 
			displayPublicationPage(request,response);
		else if(page.equals("/publication_validatepublication")) 
			validatePublication(request,response);
		else if( page.equals("/live"))
			displayLivePage(request, response);
		else if( page.equals("/recorded"))
			displayRecordedPage(request, response);
		else if( page.equals("/search"))
			displaySearchResults(request, response);
		else if( page.equals("/tags"))
			displayTagsCourses(request, response);
		else if( page.equals("/rss")) 
			displayRssPage(request, response);
		else if (page.equals("/courses"))
			displayCourses(request, response);
		else if (page.equals("/myspace_editmycourse"))
			displayEditMyCourses(request, response);
		else if( page.equals("/myspace_validatemycourse"))
			validateMyCourse(request, response, "./myspace_home");
		else if( page.equals("/myspace_upload"))
			uploadAccess(request, response);
		else if( page.equals("/myspace_mediaupload"))
			mediaUpload(request, response);
		else if( page.equals("/myspace_adddocupload"))
			myspaceAddDocUpload(request, response);
		else if( page.equals("/myspace_deleteadddoc"))
			myspaceDeleteAddDoc(request, response);
		else if( page.equals("/add") || page.equals("/UploadClient"))
			addCourse(request, response);
		else if(page.equals("/livestate") || page.equals("/LiveState"))
			liveState(request, response);
		else if( page.equals("/courseaccess")) 
			courseAccess(request, response);
		else if( page.equals("/liveaccess"))
			liveAccess(request, response);
		else if( page.equals("/help")) {
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/help");
			request.setAttribute("supportLink", supportLink);
			getServletContext().getRequestDispatcher("/WEB-INF/views/help.jsp").forward(request, response);
		}
		else if( page.equals("/contactUs")) {
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/contactUs");
			request.setAttribute("posturl", "/avc/contactUsSendMail");
			getServletContext().getRequestDispatcher("/WEB-INF/views/contactUs.jsp").forward(request, response);
		}
		else if( page.equals("/contactUsSendMail"))
			sendMailContactUs(request, response);
		else if( page.equals("/test"))
			displayTestPage(request, response);
		else if( page.equals("/changestyle"))
			changeStyle(request, response);
		else if( page.equals("/changelanguage"))
			changeLanguage(request, response);
		else if( page.equals("/deletetests")) {
			service.deleteTests(testKeyWord1);
			service.hideTests(testKeyWord2, testKeyWord3);
			/* Regeneration of the RSS files */
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor, itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);
		}
		else if( page.equals("/thick_codeform")) {
			request.setAttribute("id", request.getParameter("id"));
			request.setAttribute("type", request.getParameter("type"));
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_codeform.jsp").forward(request, response);
		}
		else if( page.equals("/thick_styles")) {
			List<String> styles = service.getStyles(getServletContext().getRealPath("/") + "files/styles/");
			request.setAttribute("styles", styles );
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_styles.jsp").forward(request, response);
		}
		else if( page.equals("/thick_languages")) {
			List<String> languages = service.getLanguages(getServletContext().getRealPath("/") + "WEB-INF/classes/org/ulpmm/univrav/language");
			request.setAttribute("languages", languages );
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_languages.jsp").forward(request, response);
		}
		else if( page.equals("/thick_legal")) 
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_legal.jsp").forward(request, response);
		else if( page.equals("/thick_download"))
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_download.jsp").forward(request, response);
		else if( page.equals("/iframe_liveslide"))
			liveSlide(request, response);
		else if( page.equals("/admin_home")) {
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/admin_home");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_home.jsp").forward(request, response);
		}
		else if( page.equals("/admin_courses")) {
			List<Course> courses = service.getAllCourses(false);
			request.setAttribute("courses",courses);
			request.setAttribute("number", courses.size());
			request.setAttribute("viewurl", "./admin_courses");
			request.setAttribute("editurl", "./admin_editcourse");
			request.setAttribute("deleteurl", "./admin_deletecourse");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_courses.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editcourse")) {
			DisplayAdminEditCourse(request,response);
		}
		else if( page.equals("/admin_deletecourse")) {
			int courseid = Integer.parseInt(request.getParameter("id"));
			service.deleteTag(courseid);
			service.deleteCourse(courseid, service.getCourse(courseid).getMediaFolder());
			/* Regeneration of the RSS files */
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor, itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);
			response.sendRedirect(response.encodeRedirectURL("./admin_courses"));
		}
		else if( page.equals("/admin_validatecourse"))
			validateCourse(request, response, "./admin_courses");
		else if( page.equals("/admin_adddocupload"))
			addDocUpload(request, response);
		else if( page.equals("/admin_deleteadddoc"))
			deleteAddDoc(request, response);
		else if( page.equals("/admin_buildings")) {
			request.setAttribute("buildings", service.getBuildings());
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_buildings.jsp").forward(request, response);
		}
		else if( page.equals("/admin_addbuilding")) {
			request.setAttribute("action","add"); 
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editbuilding.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editbuilding")) {
			request.setAttribute("action","edit"); 
			request.setAttribute("building", service.getBuilding(Integer.parseInt(request.getParameter("id"))));
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editbuilding.jsp").forward(request, response);
		}
		else if( page.equals("/admin_deletebuilding")) {
			int buildingid = Integer.parseInt(request.getParameter("id"));
			service.deleteBuilding(buildingid);
			response.sendRedirect(response.encodeRedirectURL("./admin_buildings"));
		}
		else if( page.equals("/admin_validatebuilding"))
			validateBuilding(request, response);
		else if( page.equals("/admin_amphis")) {
			request.setAttribute("buildingId", request.getParameter("buildingId"));
			request.setAttribute("buildingName", service.getBuilding(Integer.parseInt(request.getParameter("buildingId"))).getName());
			request.setAttribute("amphis", service.getAmphis(Integer.parseInt(request.getParameter("buildingId"))));
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_amphis.jsp").forward(request, response);
		}
		else if( page.equals("/admin_addamphi")) {
			request.setAttribute("buildingId", request.getParameter("buildingId"));
			request.setAttribute("action","add"); 
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editamphi.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editamphi")) {
			request.setAttribute("buildingId", request.getParameter("buildingId"));
			request.setAttribute("buildingName", service.getBuilding(Integer.parseInt(request.getParameter("buildingId"))).getName());
			request.setAttribute("action","edit"); 
			request.setAttribute("amphi", service.getAmphi(Integer.parseInt(request.getParameter("id"))));
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editamphi.jsp").forward(request, response);
		}
		else if( page.equals("/admin_deleteamphi")) {
			int amphiid = Integer.parseInt(request.getParameter("id"));
			service.deleteAmphi(amphiid);
			response.sendRedirect(response.encodeRedirectURL("./admin_amphis?buildingId=" + request.getParameter("buildingId")));
		}
		else if( page.equals("/admin_validateamphi"))
			validateAmphi(request, response);
		else if( page.equals("/admin_univr")) {
			List<Course> courses = service.getUnivrCourses();
			request.setAttribute("courses", courses);
			request.setAttribute("number", courses.size());
			request.setAttribute("viewurl", "./admin_univr");
			request.setAttribute("editurl", "./admin_editunivr");
			request.setAttribute("deleteurl", "./admin_deleteunivr");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_courses.jsp").forward(request, response);
		}
		else if( page.equals("/admin_versionclient"))
			versionclient(request, response);
		else if( page.equals("/admin_editunivr")) {
			request.setAttribute("course", service.getCourse(Integer.parseInt(request.getParameter("id"))));
			request.setAttribute("posturl", "./admin_validateunivr");
			request.setAttribute("gobackurl", "./admin_univr");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editcourse.jsp").forward(request, response);
		}
		else if( page.equals("/admin_deleteunivr")) {
			int courseid = Integer.parseInt(request.getParameter("id"));
			service.deleteUnivr(courseid);
			service.deleteTag(courseid);
			service.deleteCourse(courseid, service.getCourse(courseid).getMediaFolder());
			/* Regeneration of the RSS files */
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor, itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);
			response.sendRedirect(response.encodeRedirectURL("./admin_univr"));
		}
		else if( page.equals("/admin_validateunivr"))
			validateCourse(request, response, "./admin_univr");
		else if( page.equals("/admin_users")) {
			request.setAttribute("viewurl", "./admin_users");
			List<User> users = service.getAllUsers();
			request.setAttribute("users", users );
			request.setAttribute("number", users.size());
			request.setAttribute("editurl", "./admin_edituser");
			request.setAttribute("deleteurl", "./admin_deleteuser");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_users.jsp").forward(request, response);
		}
		else if( page.equals("/admin_edituser")) {
			request.setAttribute("action","edit"); 
			request.setAttribute("user", service.getUser(Integer.parseInt(request.getParameter("id"))));
			request.setAttribute("posturl", "./admin_validateuser");
			request.setAttribute("gobackurl", "./admin_users");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_edituser.jsp").forward(request, response);
		}
		else if( page.equals("/admin_validateuser"))
			validateUser(request, response);
		else if( page.equals("/admin_deleteuser")) {
			Integer userid = request.getParameter("id")!=null ? Integer.parseInt(request.getParameter("id")) : null;
			if(service.getCourseNumber(service.getUser(userid))==0) {
				service.deleteUser(userid);
				response.sendRedirect(response.encodeRedirectURL("./admin_users"));
			}
			else {
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", "You cannot delete this user because he have courses");
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
			}
		}
		else if( page.equals("/admin_adduser")) {
			request.setAttribute("action","add"); 
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_edituser.jsp").forward(request, response);
		}
		else if( page.equals("/admin_selections")) {
			request.setAttribute("viewurl", "./admin_selections");
			List<Selection> selections = service.getAllSelections();
			request.setAttribute("selections", selections );
			request.setAttribute("number", selections.size());
			request.setAttribute("editurl", "./admin_editselection");
			request.setAttribute("deleteurl", "./admin_deleteselection");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_selections.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editselection")) {
			request.setAttribute("action","edit"); 
			request.setAttribute("selection", service.getSelection(Integer.parseInt(request.getParameter("id"))));
			request.setAttribute("posturl", "./admin_validateselection");
			request.setAttribute("gobackurl", "./admin_selections");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editselection.jsp").forward(request, response);
		}
		else if( page.equals("/admin_validateselection"))
			validateSelection(request, response);
		else if( page.equals("/admin_deleteselection")) {
			Integer selectionid = request.getParameter("id")!=null ? Integer.parseInt(request.getParameter("id")) : null;
			service.deleteSelection(selectionid);
			response.sendRedirect(response.encodeRedirectURL("./admin_selections"));
		}
		else if( page.equals("/admin_addselection")) {
			request.setAttribute("action","add"); 
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editselection.jsp").forward(request, response);
		}
		else if( page.equals("/admin_teachers")) {
			request.setAttribute("viewurl", "./admin_teachers");
			List<Teacher> teachers = service.getAllTeachers();
			request.setAttribute("teachers", teachers );
			request.setAttribute("number", teachers.size());
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_teachers.jsp").forward(request, response);
		}
		else if( page.equals("/admin_stats")) {
			request.setAttribute("diskspaceinfo", service.getDiskSpaceInfo());
			request.setAttribute("statsUrl", statsUrl);
			request.setAttribute("oldStatsUrl", oldStatsUrl);
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_stats.jsp").forward(request, response);
		}
		else if( page.equals("/univr_creation")) 
			univrCreation(request, response);
		else if( page.equals("/univr_courseaccess")) 
			univrCourseAccess(request, response);
		else
			displayHomePage(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		/* Calls the DoGet method */
		doGet(request, response);
	}
	
	/**
	 * Method to display the home page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayHomePage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		/* initializes the model */
		request.setAttribute("teachers", service.getTeachers());
		request.setAttribute("formations", service.getFormations());
		request.setAttribute("lastcourses", service.getNLastCourses(lastCourseNumber, testKeyWord2, testKeyWord3));
		request.setAttribute("selectioncourses", service.getNSelectionCourses(selectionCourseNumber, testKeyWord2, testKeyWord3));
		request.setAttribute("collectioncourses", service.getNFormationCourses(collectionCourseNumber, testKeyWord2, testKeyWord3));
		request.setAttribute("collectionname", service.getSelection(1)!=null ? service.getSelection(1).getFormationcollection() : "");
		request.setAttribute("rssFileName", rssName + ".xml");
		request.setAttribute("allTags", service.getAllTags());
		request.setAttribute("mostPopularTags", service.getTagCloud(service.getMostPopularTags()));
			
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/home");
		
		/* Displays the view */
		getServletContext().getRequestDispatcher("/WEB-INF/views/home.jsp").forward(request, response);
	}
	
	
	
	/**
	 * Method to authenticate a local user
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void authentication(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		if(request.getParameter("account")!=null) {
			
			String hash = request.getParameter("account");
			User user = service.getUserLocalByHash(hash);
						
			if(user!=null) {
								
				// If user cas not connected
				if(session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER)==null) {
					
					// Connection LOCAL
					session.setAttribute("$userLocalLogin", user.getLogin());
					session.setAttribute("btnDeco", true);
					response.sendRedirect("./myspace_home");
				}
				else {
					request.setAttribute("messagetype", "error");
					request.setAttribute("message", "Disconnect your account uds first");
					getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
				}
				
			}
			else {
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", "You don't have access to this page");
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
			}
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "Wrong parameters");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
		}
	}
	
	
	/**
	 * Method to authenticate a cas user
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void authenticationCas(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		

		// If we have the cas ticket
		if(casUser!=null) {
			// We get the user login from the session
			// or we get the user from the database
				User user = service.getUser(casUser);
				
				// Gets user's infos from the ldap
				List<String> userInfos = null;		
				try { userInfos= service.getLdapUserInfos(casUser);} catch (Exception e) { e.printStackTrace(); }
								
				// If the user is null, create an account
				if(user==null) {

					if (userInfos!=null && !userInfos.isEmpty())
						service.addUser(new User(0,casUser,userInfos.get(0),userInfos.get(1),userInfos.get(2),userInfos.get(3),userInfos.get(4),"ldap",true));
					else 
						service.addUser(new User(0,casUser,null,null,null,null,null,"ldap",true));
				}
				else {
					if (userInfos!=null && !userInfos.isEmpty()) {
						
						String email = userInfos.get(0);
						String firstname = userInfos.get(1);
						String lastname = userInfos.get(2);
						String profile = userInfos.get(3);
						String establishment = userInfos.get(4);
						
						// Check values between ldap and database. Modify user if necessary.
						if(user.getEmail()==null || !user.getEmail().equals(email) || user.getFirstname()==null || !user.getFirstname().equals(firstname) || 
								user.getLastname()==null || !user.getLastname().equals(lastname) || user.getProfile()==null || !user.getProfile().equals(profile) ||
								user.getEstablishment()==null ||!user.getEstablishment().equals(establishment)) {
							user.setEmail(email);
							user.setFirstname(firstname);
							user.setLastname(lastname);
							user.setProfile(profile);
							user.setEstablishment(establishment);
							service.modifyUser(user);
						}
					}
				}
				
				// Disconnect user LOCAL if exist
				if(session.getAttribute("$userLocalLogin")!=null) {	
					session.removeAttribute("$userLocalLogin");
				}
							
				session.setAttribute("btnDeco", true);
				
				//REDIRECTION
				// Publication
				if(request.getParameter("returnPage")!=null && request.getParameter("returnPage").equals("publication")) {
					request.setAttribute("publication_type", "serverCas");
					getServletContext().getRequestDispatcher("/avc/publication").forward(request, response);
				}
				//Myspace
				else if(request.getParameter("returnPage")!=null && request.getParameter("returnPage").equals("myspace")) {
					getServletContext().getRequestDispatcher("/avc/myspace_home").forward(request, response);
				}	
				//Course access for medicine
				else if(request.getParameter("returnPage")!=null && request.getParameter("returnPage").equals("courseaccess")) {
					getServletContext().getRequestDispatcher("/avc/courseaccess").forward(request, response);
				}
				//Live access for medicine
				else if(request.getParameter("returnPage")!=null && request.getParameter("returnPage").equals("liveaccess")) {
					getServletContext().getRequestDispatcher("/avc/liveaccess").forward(request, response);
				}
				// from ENT
				else {
					response.sendRedirect("./home");
				}
				
			}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "You don't have access to this page");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
		}
		
	}
	
	
	/**
	 * Method to display the myspace page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayMyspace(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
				
		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		
		
		User user = null;
		// Authentification CAS	
		if(casUser!=null) {
			// Gets the user from the session
			user=service.getUser(casUser);
		}
		// Authentification local
		else if(session.getAttribute("$userLocalLogin")!=null) {
			user=service.getUser(session.getAttribute("$userLocalLogin").toString());
		}
		
		// if the user is not authenticated, redirection to authentication_cas
		if(user==null) {
			response.sendRedirect("./authentication_cas?returnPage=myspace");
		}
		// if user is present and activate
		else if(user.isActivate()) {
			
			int start = 0;
			int pageNumber;

			/* initializes the model */
			if( request.getParameter("page") != null) {
				pageNumber = Integer.parseInt( request.getParameter("page"));
				start = recordedCourseNumber * (pageNumber - 1) ;
			}
			else
				pageNumber = 1;

			request.setAttribute("page", pageNumber);
			request.setAttribute("teachers", service.getTeachers());
			request.setAttribute("formations", service.getFormations());
			request.setAttribute("courses", service.getCoursesByUser(user,recordedCourseNumber,start,false));
			request.setAttribute("items", service.getCourseNumber(user));
			request.setAttribute("number", recordedCourseNumber);
			request.setAttribute("resultPage", "myspace_home");
			request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
			request.setAttribute("user", user);

			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/myspace_home?page=" + pageNumber);

			// Button disconnect
			session.setAttribute("btnDeco", true);

			/* Displays the view */ 
			getServletContext().getRequestDispatcher("/WEB-INF/views/myspace/myspace_home.jsp").forward(request, response);
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "You don't have access to this page");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}

	}
	
	/**
	 * Method to logout the user
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void logout(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		// Button disconnect
		session.setAttribute("btnDeco", false);
		
		// Authentication CAS
		if(session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER)!=null) {		
			session.removeAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);
			response.sendRedirect(casLogoutUrl);
		}
		
		// Authentication local
		if(session.getAttribute("$userLocalLogin")!=null) {	
			session.removeAttribute("$userLocalLogin");
			response.sendRedirect("./home");
		}
		
	}
	
	
	private void displayPublicationPage(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {  

		if(request.getParameter("publication_type")!=null) {
			request.setAttribute("publication_type", request.getParameter("publication_type"));	
		}

		if(request.getParameter("id")!=null) {
			session.setAttribute("publication_id", request.getParameter("id"));
		}

		if(request.getParameter("mediapath")!=null) {
			session.setAttribute("publication_mediapath", request.getParameter("mediapath"));
		}
		
		// Standard course
		if( request.getParameter("id")==null || request.getParameter("id").equals("") || request.getParameter("id").equals("(id:no)") || request.getParameter("id").equals("None") ) {

			// Get the form parameters if error message
			request.setAttribute("title", request.getParameter("title"));
			request.setAttribute("description", request.getParameter("description"));
			request.setAttribute("name", request.getParameter("name"));
			request.setAttribute("firstname", request.getParameter("firstname"));
			request.setAttribute("ue", request.getParameter("ue"));
			request.setAttribute("genre", request.getParameter("genre"));
			request.setAttribute("tags", request.getParameter("tags"));
			request.setAttribute("visible", request.getParameter("visible"));
			request.setAttribute("restrictionuds", request.getParameter("restrictionuds"));
			
			String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		

			User user = null;
			// Authentification CAS	
			if(casUser!=null) {
				// Gets the user from the session
				user=service.getUser(casUser);
			}

			// if user is present and activate
			if(user!=null && user.isActivate()) {

				request.setAttribute("user", user);

				// Button disconnect
				session.setAttribute("btnDeco", true);
			}
			
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/publication");

			/* Displays the view */ 
			getServletContext().getRequestDispatcher("/WEB-INF/views/publication.jsp").forward(request, response);

		}
		// Univr Course
		else {
			request.setAttribute("id", "");	
			getServletContext().getRequestDispatcher("/avc/UploadClient").forward(request, response);

		}
	}
	
	/**
	 * Method to validate the publication form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void validatePublication(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
				
		// Test form parameters
		if(request.getParameter("mediapath")==null || request.getParameter("mediapath").equals("")) {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "Mediapath is not found!");
			getServletContext().getRequestDispatcher("/avc/publication").forward(request, response);
		}
		else if(request.getParameter("title")==null || request.getParameter("title").equals("")) {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "Field title must be completed");
			getServletContext().getRequestDispatcher("/avc/publication").forward(request, response);
		}
		else if(request.getParameter("name")==null || request.getParameter("name").equals("")) {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "Field name must be completed");
			getServletContext().getRequestDispatcher("/avc/publication").forward(request, response);
		}
		// If the formulaire is valid
		else {
			getServletContext().getRequestDispatcher("/avc/UploadClient").forward(request, response);
		}
	}
	
	
	/**
	 * Method to display the live page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayLivePage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {  
		/* initializes the model */
		request.setAttribute("buildings", service.getBuildings());
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/live");
				
		/* Displays the view */ 
		getServletContext().getRequestDispatcher("/WEB-INF/views/live.jsp").forward(request, response);
	}
	
	/**
	 * Method to display the recorded page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayRecordedPage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
				
		int start = 0;
		int pageNumber;
		
		/* initializes the model */
		if( request.getParameter("page") != null) {
			pageNumber = Integer.parseInt( request.getParameter("page"));
			start = recordedCourseNumber * (pageNumber - 1) ;
		}
		else
			pageNumber = 1;
		
		request.setAttribute("page", pageNumber);
		request.setAttribute("teachers", service.getTeachers());
		request.setAttribute("formations", service.getFormations());
		request.setAttribute("courses", service.getCourses(recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("items", service.getCourseNumber(testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("number", recordedCourseNumber);
		request.setAttribute("resultPage", "recorded");
		request.setAttribute("allTags", service.getAllTags());
		request.setAttribute("mostPopularTags", service.getTagCloud(service.getMostPopularTags()));
		
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/recorded?page=" + pageNumber);
		
		/* Displays the view */
		getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
	}
	
	/**
	 * Method to display the rss page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayRssPage(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {  
		
		//Number of Teachers with RSS, for the list in the jsp page
		request.setAttribute("nbrTeachersRss",service.getTeachers().size());
		// Rss Files
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
		// Server Url
		request.setAttribute("serverUrl", serverUrl);
				
		/* Displays the view */ 
		getServletContext().getRequestDispatcher("/WEB-INF/views/rss.jsp").forward(request, response);
	}
	
	/**
	 * Method to display the test page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayTestPage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		int start = 0;
		int pageNumber;
		
		/* initializes the model */
		if( request.getParameter("page") != null) {
			pageNumber = Integer.parseInt( request.getParameter("page"));
			start = recordedCourseNumber * (pageNumber - 1) ;
		}
		else
			pageNumber = 1;
		
		request.setAttribute("page", pageNumber);
		request.setAttribute("teachers", service.getTeachers());
		request.setAttribute("formations", service.getFormations());
		request.setAttribute("courses", service.getTests(recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("items", service.getTestNumber(testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("number", recordedCourseNumber);
		request.setAttribute("resultPage", "test");
		request.setAttribute("allTags", service.getAllTags());
		request.setAttribute("mostPopularTags", service.getTagCloud(service.getMostPopularTags()));
		
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/test?page=" + pageNumber);
		
		/* Displays the view */
		getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
	}
	
	/**
	 * Method to display the results of the search
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	@SuppressWarnings("unchecked")
	private void displaySearchResults(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		int start = 0;
		int pageNumber;
		
		HashMap<String, String> params = new HashMap<String, String>();
		
		if( request.getMethod().equals("POST")) { // The form has just been posted
			
			pageNumber = 1;			
			
			/* Puts the search paramaters in a HashMap object */
			if( request.getParameter("audio") != null && request.getParameter("video") == null ) 
				params.put("type", "audio");
			else if( request.getParameter("audio") == null && request.getParameter("video") != null ) 
				params.put("type", "video");
			else if( request.getParameter("audio") == null && request.getParameter("video") == null ) 
				params.put("type", "");
			
			if( request.getParameter("fullname") != null && ! request.getParameter("fullname").equals("*") ) 
				params.put("fullname", request.getParameter("fullname"));
			
			if( request.getParameter("formation") != null && ! request.getParameter("formation").equals("*") ) 
				params.put("formation", request.getParameter("formation"));
			
			if( request.getParameter("keyword") != null && ! request.getParameter("keyword").equals("") ) 
				params.put("keyword", request.getParameter("keyword"));
			
			/* Saves the hashmap in the session */
			session.setAttribute("params", params);
		}
		else { // The user has clicked on a pagination link
			
			pageNumber = Integer.parseInt( request.getParameter("page"));
			start = recordedCourseNumber * (pageNumber - 1) ;
			
			params = (HashMap<String, String>) session.getAttribute("params");
		}
		
		if( params != null) {
			/* Saves the parameters of the form */
			if( params.get("type") == null ) { 
				request.setAttribute("audio", "checked");
				request.setAttribute("video", "checked");
			}
			else if( (params.get("type")).equals("audio") ) {
				request.setAttribute("audio", "checked");
			}
			else if( (params.get("type")).equals("video") ) {
				request.setAttribute("video", "checked");
			}
			
			if( params.get("fullname") != null && ! params.get("fullname").equals("*") ) {
				request.setAttribute("nameSelected", params.get("fullname"));
			}
			
			if( params.get("formation") != null && ! params.get("formation").equals("*") ) {
				request.setAttribute("formationSelected", params.get("formation"));
			}
			
			if( params.get("keyword") != null && ! params.get("keyword").equals("") ) {
				request.setAttribute("keyword", params.get("keyword"));
			}
			
			request.setAttribute("page", pageNumber);
			request.setAttribute("teachers", service.getTeachers());
			request.setAttribute("formations", service.getFormations());
			request.setAttribute("courses", service.getCourses(params, recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("items", service.getCourseNumber(params,testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("number", recordedCourseNumber);
			request.setAttribute("resultPage", "search");
			request.setAttribute("allTags", service.getAllTags());
			request.setAttribute("mostPopularTags", service.getTagCloud(service.getMostPopularTags()));
			
			request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
			
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/search?page=" + pageNumber);
			
			/* Displays the view */
			getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
		}
		else { // if the session is not valid anymore
			response.sendRedirect("./recorded");
		}
	}
	
	/**
	 * Method to display the courses page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayCourses(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		int start = 0;
		int pageNumber=1;
		
		HashMap<String, String> params = new HashMap<String, String>();
		
		if( request.getParameter("author") != null) {
			params.put("fullname", WordUtils.capitalize(new String(request.getParameter("author").getBytes("8859_1"),"UTF8")));
		}
		
		if( request.getParameter("formation") != null) {
			params.put("formation", new String(request.getParameter("formation").getBytes("8859_1"),"UTF8"));
		}
		
		/* Saves the hashmap in the session */
		session.setAttribute("params", params);
		
		if( params != null) {
			
			String rssNamePar=rssName;
			
			request.setAttribute("audio", "checked");
			request.setAttribute("video", "checked");
							
			if( params.get("fullname") != null) {
				request.setAttribute("nameSelected", params.get("fullname"));
				rssNamePar=service.cleanFileName(params.get("fullname"));
			}
			
			// Priority for the rss "formation"
			if( params.get("formation") != null ) {
				request.setAttribute("formationSelected", params.get("formation"));
				rssNamePar=service.cleanFileName(params.get("formation"));
			}
									
			request.setAttribute("page", pageNumber);
			request.setAttribute("teachers", service.getTeachers());
			request.setAttribute("formations", service.getFormations());	
			request.setAttribute("courses", service.getCourses(params, recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("items", service.getCourseNumber(params,testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("number", recordedCourseNumber);
			request.setAttribute("resultPage", "search");
			request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssNamePar));
			request.setAttribute("allTags", service.getAllTags());
			request.setAttribute("mostPopularTags", service.getTagCloud(service.getMostPopularTags()));
			
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/search?page=" + pageNumber);
			
			/* Displays the view */
			getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
		}
		else { // if the session is not valid anymore
			response.sendRedirect("./recorded");
		}
	}
	
	/**
	 * Method to display courses by tags
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayTagsCourses(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
					
		if( request.getParameter("tags") != null)  {
						
			int pageNumber = request.getParameter("page")!=null ? Integer.parseInt( request.getParameter("page")):1;
			int start = recordedCourseNumber * (pageNumber - 1) ;
				
			String tags = new String(request.getParameter("tags").getBytes("8859_1"),"UTF8");
					
			List<String> listTags = new ArrayList<String>();
			StringTokenizer st = new StringTokenizer(tags);
			while(st.hasMoreTokens()) {
				listTags.add(st.nextToken());
			}
															
			String rssNamePar=rssName;
			
			request.setAttribute("audio", "checked");
			request.setAttribute("video", "checked");
													
			request.setAttribute("page", pageNumber);
			request.setAttribute("teachers", service.getTeachers());
			request.setAttribute("formations", service.getFormations());	
			request.setAttribute("courses", service.getCoursesByTags(listTags, recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("items", service.getCourseNumber(listTags,testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("number", recordedCourseNumber);
			request.setAttribute("resultPage", "tags"); 
			request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssNamePar));
			request.setAttribute("allTags", service.getAllTags());
			request.setAttribute("mostPopularTags", service.getTagCloud(service.getMostPopularTags()));
			
			request.setAttribute("listTags",listTags);
			request.setAttribute("listTagsSize",listTags.size());
			request.setAttribute("tags",tags);
			
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/tags?tags="+tags+"&page=" + pageNumber);
			
			listTags=null; //set list null for memory
			st = null;
						
			/* Displays the view */
			getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
		}
		else { // if the session is not valid anymore
			response.sendRedirect("./recorded");
		}
	}
	
	/**
	 * Method to validate my course form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void validateMyCourse(HttpServletRequest request, HttpServletResponse response, String redirectUrl) 
	throws ServletException, IOException {	
						
		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		
		
		User user = null;
		// Authentification CAS	
		if(casUser!=null) {
			// Gets the user from the session
			user=service.getUser(casUser);
		}
		// Authentification local
		else if(session.getAttribute("$userLocalLogin")!=null) {
			user=service.getUser(session.getAttribute("$userLocalLogin").toString());
		}
		
		if(user!=null && user.isActivate()) {

			// Get the course
			Course c = service.getCourse(Integer.parseInt(request.getParameter("courseid")));

			// Check the user id
			if(c.getUserid()==user.getUserid()) {

				// Button disconnect
				session.setAttribute("btnDeco", true);

				validateCourse(request,response,redirectUrl);
			}
			else {
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", "You don't have access to this page");
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
			}
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "You don't have access to this page");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	/**
	 * Method to edit my course
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void displayEditMyCourses(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
				
		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		
		
		User user = null;
		// Authentification CAS	
		if(casUser!=null) {
			// Gets the user from the session
			user=service.getUser(casUser);
		}
		// Authentification local
		else if(session.getAttribute("$userLocalLogin")!=null) {
			user=service.getUser(session.getAttribute("$userLocalLogin").toString());
		}
		
		if(user!=null && user.isActivate()) {

			// Get the course
			Course c = service.getCourse(Integer.parseInt(request.getParameter("id")));
			
			// Check user id
			if(c.getUserid()==user.getUserid()) {

				// Getting tags of the course
				String tags="";
				List<Tag> listTags = service.getTagsByCourse(c);
				for(int i=0;i<listTags.size();i++) {
					if(i==0)
						tags=listTags.get(i).getTag();
					else
						tags=tags + " " + listTags.get(i).getTag();
				}

				request.setAttribute("tags", tags);
				request.setAttribute("course", c);
				request.setAttribute("posturl", "./myspace_validatemycourse");
				request.setAttribute("gobackurl", "./myspace_home");

				// Button disconnect
				session.setAttribute("btnDeco", true);


				/* Displays the view */
				getServletContext().getRequestDispatcher("/WEB-INF/views/myspace/myspace_editmycourse.jsp").forward(request, response);


			}
			else {
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", "You don't have access to this page");
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
			}
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "You don't have access to this page");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
		}
	}
		
	
	
	/**
	 * Method to add a course
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void addCourse(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
						
		String id, title, description, mediapath, media, timing, name, firstname, formation, genre, login, email,tags;
		boolean visible,restrictionuds;
		String message, message2, ahref, ahref2;
		message=message2=ahref=ahref2="";
		String messageType = "information";
		
		/* The client sends parameters in the ISO8859-15 encoding */
		request.setCharacterEncoding("ISO8859-15");
		
		if(request.getParameter("publication_type")!=null) {
			request.setCharacterEncoding("UTF-8");
		}
		
		/* Retrieves the parameters sent by the client */
		id = request.getParameter("id");
		mediapath = request.getParameter("mediapath");
		timing = request.getParameter("timing");
		description = request.getParameter("description")!=null ? service.cleanString(request.getParameter("description")) : "";
		title = request.getParameter("title")!=null ? service.cleanString(request.getParameter("title")) : "";
		name = request.getParameter("name")!=null ? service.cleanString(request.getParameter("name")) : "";
		firstname = request.getParameter("firstname")!=null ? service.cleanString(request.getParameter("firstname")) : "";
		formation = request.getParameter("ue")!=null ? service.cleanString(request.getParameter("ue")) : "";
		genre = request.getParameter("genre")!=null ? request.getParameter("genre") : "";
		login = request.getParameter("login")!=null ? request.getParameter("login") : "";
		email = request.getParameter("email")!=null ? request.getParameter("email") : "";
		
		tags = service.cleanString(request.getParameter("tags"));
		
		if(request.getParameter("publication_type")!=null) {
			visible = request.getParameter("visible") != null ? true : false;
		}
		// for old client
		else {
			visible = true;
		}
		
		if(request.getParameter("publication_type")!=null) {
			restrictionuds = request.getParameter("restrictionuds") != null ? true : false;
		}
		// for old client
		else {
			restrictionuds = false;
		}
						
		/* Verifies that all essential parameters are sent, cancels the upload if not */
		if(id != null && mediapath != null) {
			
			if( timing == null )
				timing = "n-1";
			
			String clientIP = request.getRemoteAddr();
						
			/* Retrieves the filename from the media path */
			media = mediapath.substring(mediapath.lastIndexOf("\\") + 1, mediapath.length());
			if( media.length() == mediapath.length() )
				media = mediapath.substring(mediapath.lastIndexOf("/") + 1, mediapath.length());
			
			message += "Media : " + media + "<br/>";
			
			Course c;
			User user=null; // user audiovideocours
			
			try {
				// Login with 1.12 client
				if(!login.equals("")) {	
					// getting the user
					user = service.getUser(login);
				}
				
				// Hash email for free user
				if(request.getParameter("publication_type")!=null && request.getParameter("publication_type").equals("serverFree") && email!=null && !email.equals("")) {
					//  Check if a local user with this email adress exist
					user = service.getUser(email);
					if(user==null) {
						String pass = service.generatePassword(16);
						String hash = service.encrypt(email + pass);
						service.addUser(new User(0, email, email, null, null, null, null, User.getTYPELOCAL(), true));
						service.modifyUserPassword(email, hash, "sha");
						user = service.getUser(email);
						
						// Sending email for the user
						String emailUserSubject = "Your AVC space";
						String emailUserMessage = "Dear Customer,\n\nYou can access in your space with the following url. Don't lost this mail.\n"
						+ serverUrl + "/avc/authentication?account=" + hash
						+ "\n\nBest Regards,\n\nUniv-r Av Administrator" 
						+"\n\nPlease, don't answer to this mail, for any question contact us on "+adminEmail1;
							
						service.sendMail(emailUserSubject,emailUserMessage,email);
											
					}
				}
			
				// Standard course
				if( id.equals("") || id.equals("(id:no)") || id.equals("None") ) {
										
					c = new Course(
							service.getNextCoursId(),
							new Timestamp(new Date().getTime()),
							null, // The type can't be set yet
							title.equals("") ? null : title,
							description.equals("") ? null : description,
							formation.equals("") ? null : formation,
							name.equals("") ? null : name,
							(firstname == null || firstname.equals("")) ? null : firstname,
							clientIP,
							0, // The duration can't be set yet
							(genre == null || genre.equals("")) ? null : genre,
							visible,
							0,
							timing,
							null, // The media folder can't be set yet
							user!=null ? user.getUserid() : null,
							null,
							true,
							restrictionuds,
							Course.typeFlash+Course.typeMp3+Course.typeOgg+Course.typePdf+Course.typeZip+Course.typeVideoslide	
					);
					
					service.addCourse(c, media, tags, getServletContext().getRealPath("/rss"), 
							rssName, rssTitle, rssDescription, serverUrl, 
							rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor,
							itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);
				}
				else { // Univ-R course
					int courseid = Integer.parseInt(id);
					c = service.getCourse(courseid);
					Univr u = service.getUnivr(courseid);
					c.setDate(new Timestamp(new Date().getTime()));
					c.setVisible(false);
					c.setTiming(timing);
					c.setUserid(user!=null ? user.getUserid() : null);
					service.completeUnivrCourse(c, u, media, getServletContext().getRealPath("/rss"), 
							rssName, rssTitle, rssDescription, serverUrl, 
							rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor,
							itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);
				}
								
				// Sending email for the user
				String emailUserSubject = "Your new course on Univr-AV";
				String emailUserMessage = "Dear Customer,\n\nYour course named \"" + c.getTitle()
				+"\" will be published on "+ recordedInterfaceUrl + "?id="+c.getCourseid()+"&type=flash" 
				+ "\n\nBest Regards,\n\nUniv-r Av Administrator" 
				+"\n\nPlease, don't answer to this mail, for any question contact us on "+adminEmail1;
						
				//if the email from av client is present, send an email
				if(email!=null && !email.equals("")) {
					service.sendMail(emailUserSubject,emailUserMessage,email);
				}
				// If the user is not anonymous and his email is present and different of email
				if(user!=null && user.getEmail()!=null && !user.getEmail().equals("") && !user.getEmail().equals(email)) {
					service.sendMail(emailUserSubject,emailUserMessage,user.getEmail());
				}
								
				// If course is present in the recorded page
				if(c.isVisible() && (c.getGenre()!=null ? !c.getGenre().toUpperCase().equals(testKeyWord1.toUpperCase()) : true) && (c.getTitle()!=null ? !c.getTitle().toUpperCase().startsWith(testKeyWord2.toUpperCase()) : false)) {
					// Sending email for admins
					String emailAdminSubject = "a new course on Univr-AV";
					String emailAdminMessage = "Dear Admin,\n\nA course named \"" + c.getTitle() +"\" is published on "+ recordedInterfaceUrl + "?id="+c.getCourseid()+"&type=flash" + (c.getGenre()!=null ? "\n\nPassword:"+c.getGenre() : "") + "\n\nBest Regards,\n\nUniv-r Av Administrator" ;
					if(adminEmail1!=null && !adminEmail1.equals(""))
						service.sendMail(emailAdminSubject,emailAdminMessage,adminEmail1);
					if(adminEmail2!=null && !adminEmail2.equals(""))
						service.sendMail(emailAdminSubject,emailAdminMessage,adminEmail2);
					if(adminEmail3!=null && !adminEmail3.equals(""))
						service.sendMail(emailAdminSubject,emailAdminMessage,adminEmail3);
				}
				
				message = "File successfully sent. Your course named \"" + c.getTitle() +"\" will be published on: ";
				ahref = recordedInterfaceUrl + "?id="+c.getCourseid()+"&type=flash";
				message2 = "You can access in your space here: ";
				ahref2 = serverUrl + "/avc/authentication_cas?returnPage=myspace";
			
				
				request.setAttribute("messagetype2", messageType);
				request.setAttribute("message2", message2);
				request.setAttribute("ahref", ahref);
				request.setAttribute("ahref2", ahref2);
			}
			catch( DaoException de) {
				messageType = "error";
				message = "Error : Database error";
			}
								
		}
		else {
			messageType = "error";
			message = "Error: One ore more parameters have not been given";
		}
		
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
	}
	
	/**
	 * Method to display the upload access page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void uploadAccess(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {

		String forwardUrl = "/WEB-INF/views/myspace/myspace_uploadpage.jsp";
		
		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		
		
		User user = null;
		// Authentification CAS	
		if(casUser!=null) {
			// Gets the user from the session
			user=service.getUser(casUser);
		}
		// Authentification local
		else if(session.getAttribute("$userLocalLogin")!=null) {
			user=service.getUser(session.getAttribute("$userLocalLogin").toString());
		}

		// Gets the user's login from the session		
		if(user!=null && user.isActivate()) {
			
			request.setAttribute("gobackurl", "./myspace_home");
			request.setAttribute("user", user);		
			session.setAttribute("btnDeco", true);
			session.setAttribute("previousPage", "/myspace_upload");
			
			getServletContext().getRequestDispatcher(forwardUrl).forward(request, response);
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "You don't have access to this page");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
		}
	}
	
	/**
	 * Method to upload a media
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	@SuppressWarnings("unchecked")
	private void mediaUpload(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {

		// Attribute
		String title, description, name, firstname, date, formation, genre,tags, fileName;
		title = description = name = firstname = date = formation = genre = tags = fileName = "";
		boolean hq=false;
		boolean visible=false;
		boolean restrictionuds=false;
		String message = "";
		String messageType = "information";
		String requestDispatcher = "/WEB-INF/views/message.jsp";
		Calendar cal = new GregorianCalendar();        	
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		Date d = new Date();
		boolean continuer=true;

		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		

		User user = null;
		// Authentification CAS	
		if(casUser!=null) {
			// Gets the user from the session
			user=service.getUser(casUser);
		}
		// Authentification local
		else if(session.getAttribute("$userLocalLogin")!=null) {
			user=service.getUser(session.getAttribute("$userLocalLogin").toString());
		}

		if(user!=null && user.isActivate()) {

			if( ServletFileUpload.isMultipartContent(new ServletRequestContext(request)) ) {

				try {
					/* Prepares to parse the request to get the different elements of the POST */
					FileItemFactory factory = new DiskFileItemFactory();
					ServletFileUpload upload = new ServletFileUpload(factory);
					List<FileItem> items = upload.parseRequest(request);

					/* Processes the different elements */
					Iterator<FileItem> iter = items.iterator();
					while (iter.hasNext() && continuer) {
						FileItem item = (FileItem) iter.next();

						/* If the element is a form field, retrieves the info */
						if (item.isFormField()) {

							if(item.getFieldName().equals("title"))
								title = item.getString("UTF8");
							else if(item.getFieldName().equals("description"))
								description = item.getString("UTF8");
							else if(item.getFieldName().equals("date")){
								date = item.getString("UTF8");
								try {
									d = sdf.parse(date);					        	
								}
								catch( ParseException pe) {
									pe.printStackTrace();
								}
								finally {
									cal.setTime(d);
								}
							}
							else if(item.getFieldName().equals("formation"))
								formation = item.getString("UTF8");
							else if(item.getFieldName().equals("genre")) {
								genre = item.getString("UTF8");
							}
							else if(item.getFieldName().equals("name")) {
								name = item.getString("UTF8");
							}
							else if(item.getFieldName().equals("firstname")) {
								firstname = item.getString("UTF8");
							}
							else if(item.getFieldName().equals("hd")) {
								hq=true;
							}
							else if(item.getFieldName().equals("visible")) {
								visible=true;
							}
							else if(item.getFieldName().equals("tags")) {
								tags = item.getString("UTF8");
							}
							else if(item.getFieldName().equals("restrictionuds")) {
								restrictionuds=true;
							}

						} /* If the element is a file (the last element */
						else {
							fileName = item.getName();
							String extension = fileName.contains(".") ? fileName.substring(fileName.lastIndexOf('.') + 1,fileName.length()).toLowerCase() : "";
							
							// Test the form
							if(fileName==null || fileName.equals("")) {
								messageType = "error";
								message = "File must be completed";
								requestDispatcher="/avc/myspace_upload";								
							}
							/* Checks the extension of the item to have a supported file format */
							else if( !extension.equals("mp3") && !extension.equals("ogg") && !extension.equals("wav") && !extension.equals("wma") && !extension.equals("avi") && !extension.equals("divx") 
									&& !extension.equals("rm") && !extension.equals("rv") && !extension.equals("mp4") && !extension.equals("mpg") 
									&& !extension.equals("mpeg") && !extension.equals("mov") && !extension.equals("wmv") && !extension.equals("mkv") && !extension.equals("flv") ) {

								messageType = "error";
								message = "Error: Not supported file format : " + extension;
								requestDispatcher="/avc/myspace_upload";
							}
							else if(title==null || title.equals("")) {
								messageType = "error";
								message = "Field title must be completed";
								requestDispatcher="/avc/myspace_upload";
							}
							else if(name==null || name.equals("")) {
								messageType = "error";
								message = "Field name must be completed";
								requestDispatcher="/avc/myspace_upload";
							}
							else {
								
								String clientIP = request.getRemoteAddr();
								String timing = "n-1";
								String type = (extension.equals("mp3") || extension.equals("ogg") || extension.equals("wav") || extension.equals("wma")) ? "audio" : "video";
								int mediaType = Course.typeFlash+Course.typeMp3+Course.typeOgg+((hq&&type.equals("video"))?Course.typeHq:0)+(type.equals("video")?Course.typeZip:0);
																								
								Course c = new Course(
										service.getNextCoursId(),
										new Timestamp(new Date().getTime()),
										type,
										title.equals("") ? null : title,
										description.equals("") ? null : description,
										formation.equals("") ? null : formation,
										(name == null || name.equals("")) ? null : name,
										(firstname == null || firstname.equals("")) ? null : firstname,
										clientIP,
										0, // The duration can't be set yet
										(genre == null || genre.equals("")) ? null : genre,
										visible,
										0,
										timing,
										null, // The media folder can't be set yet
										user.getUserid(),
										null,
										true,
										restrictionuds,
										mediaType
								);

								/* Sends the creation of the course to the service layer */
								service.mediaUpload(c, item, tags, getServletContext().getRealPath("/rss"), 
										rssName, rssTitle, rssDescription, serverUrl, 
										rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor,
										itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);

								// Sending email for the user
								String emailUserSubject = "Your new file on Univr-AV";
								String emailUserMessage = "Dear Customer,\n\nYour file named \"" + c.getTitle()
								+"\" will be published on "+ recordedInterfaceUrl + "?id="+c.getCourseid()+"&type=flash" 
								+"\nDon't panic if your video doesn't appear in the website right now. The conversion may be long (30 minutes for 1 hour video)"
								+ "\n\nBest Regards,\n\nUniv-r Av Administrator" 
								+"\n\nPlease, don't answer to this mail, for any question contact us on "+adminEmail1;

								// If the user is not anonymous and his email is present
								if(user!=null && user.getEmail()!=null && !user.getEmail().equals("")) {
									service.sendMail(emailUserSubject,emailUserMessage,user.getEmail());
								}

								// If course is present in the recorded page
								if(c.isVisible() && (c.getGenre()!=null ? !c.getGenre().toUpperCase().equals(testKeyWord1.toUpperCase()) : true) && (c.getTitle()!=null ? !c.getTitle().toUpperCase().startsWith(testKeyWord2.toUpperCase()) : false)) {
									// Sending email for admins
									String emailAdminSubject = "a new file on Univr-AV";
									String emailAdminMessage = "Dear Admin,\n\nA file named \"" + c.getTitle() +"\" will be published on "+ recordedInterfaceUrl + "?id="+c.getCourseid()+"&type=flash" + (c.getGenre()!=null ? "\n\nPassword:"+c.getGenre() : "") + "\n\nBest Regards,\n\nUniv-r Av Administrator" ;
									if(!adminEmail1.equals(""))
										service.sendMail(emailAdminSubject,emailAdminMessage,adminEmail1);
									if(!adminEmail2.equals(""))
										service.sendMail(emailAdminSubject,emailAdminMessage,adminEmail2);
									if(!adminEmail3.equals(""))
										service.sendMail(emailAdminSubject,emailAdminMessage,adminEmail3);
								}

								message = "File successfully sent ! ";
								message += "Don't panic if your video doesn't appear in the list right now. The conversion may be long (30 minutes for 1 hour video)";
							}
						}
					}
				}
				catch( FileUploadException fue) {
					messageType = "error";
					message = "Error : File upload error";
				}
			}
			else {
				messageType = "error";
				message = "Error: Incorrect file upload request";
			}
		}
		else { 
			messageType = "error";
			message = "Error: You don't have access to this page";
		}

		
		if(requestDispatcher.equals("/avc/myspace_upload")) {
			request.setAttribute("title", title);
			request.setAttribute("description", description);
			request.setAttribute("name", name);
			request.setAttribute("firstname", firstname);
			request.setAttribute("ue", formation);
			request.setAttribute("genre", genre);
			request.setAttribute("tags", tags);
			request.setAttribute("visible", visible!=false ? visible : null);
			request.setAttribute("hd", hq!=false ? hq : null);
			request.setAttribute("restrictionuds", restrictionuds!=false ? restrictionuds : null);
		}
				
		/* Displays the result of the upload process */
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher(requestDispatcher).forward(request, response);
	}

	/**
	 * Method to change the live status
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void liveState(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		String message = "";
		String messageType = "information";
		
		String recordingPlace = request.getParameter("recordingPlace");
		String status = request.getParameter("status");
		
		/* Verifies that all parameters are sent and are not empty */
		if( recordingPlace != null && status != null && ! recordingPlace.equals("") && ! status.equals("")) {
			
			/* Verifies that the "status" variable contains one of the two authorized strings */
			if( status.equals("begin") || status.equals("end")) {
				recordingPlace = recordingPlace.replace('_', '.');
				service.setAmphiStatus(recordingPlace, status.equals("begin"));
				message = "Amphi : " + recordingPlace + " : " + status;
			}
			else {
				messageType = "error";
				message = "Error: possible status values for status : {begin ; end}";
			}
		} 
		else {
			messageType = "error";
			message = "Error: missing parameters: recordingPlace and status must be sent";
		}
		
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
	}
	
	/**
	 * Method to get or display a course (flash, mp3, pdf ...)
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void courseAccess(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		int courseid = Integer.parseInt( (String) request.getParameter("id"));
		Course c = null;
		String genre = (String) request.getParameter("code");
		String type = (String) request.getParameter("type");
		
		try {
			if( genre == null)
				c = service.getCourse(courseid);
			else
				c = service.getCourse(courseid, genre);
			

			//To lock access of course with UDS account
			User user = null;
			if(c.isRestrictionuds()) {
				String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		
				if(casUser!=null) // Authentification CAS	
					user=service.getUser(casUser); // Gets the user from the session		
			}
					
			// if the user is not authenticated, redirection to authentication_cas
			if(c.isRestrictionuds() && user==null) {
				response.sendRedirect("./authentication_cas?returnPage=courseaccess&id="+courseid+"&type="+(type != null ? type : "flash")+(genre !=null ? "&code="+genre:""));
			}
			else if(c.isRestrictionuds() && user!=null && !user.isActivate()) {
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", "You don't have access to this page");
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
			}
			else {

				if( genre == null && c.getGenre() != null) { // The user tries to access to the protected course directly via the URL

					/* Redirects the client to the access code typing form */
					request.setAttribute("id", courseid);
					request.setAttribute("type", type != null ? type : "flash");
					getServletContext().getRequestDispatcher("/WEB-INF/views/codeform.jsp").forward(request, response);
				}
				else {

					// To fix a bug with SSL and IE
					String slidesurl = null;
					if(request.getRequestURL().toString().substring(0, 5).equals("https") && coursesUrl.substring(0, 4).equals("http"))
						slidesurl = coursesUrl.replace("http", "https") + c.getMediaFolder() + "/screenshots/";
					else 
						slidesurl = coursesUrl + c.getMediaFolder() + "/screenshots/";

					service.incrementConsultations(c);

					// Check the media availability
					if(c.isAvailable(type)) {
						
						if( type == null || type.equals("flash")) {
							/* redirection to the FlvPlay JS interface */
							String courseExtension = "";
							if( c.getType().equals("audio"))
								courseExtension = ".mp3";
							else if( c.getType().equals("video"))
								courseExtension = ".flv";

							request.setAttribute("courseurl", coursesUrl + c.getMediaFolder() + "/" + c.getMediasFileName() + courseExtension);
							request.setAttribute("slidesurl", slidesurl);
							request.setAttribute("course", c);
							List<Slide> slides = service.getSlides(c.getCourseid());
							request.setAttribute("slides", slides);
							Amphi a = service.getAmphi(c.getIpaddress());
							String amphi = a != null ? a.getName() : "";
							String building = service.getBuildingName(c.getIpaddress());
							request.setAttribute("amphi", amphi);
							request.setAttribute("building", building);
							if( c.getTiming().equals("n-1"))
								request.setAttribute("timing", 1);
							else
								request.setAttribute("timing", 0);

							request.setAttribute("serverUrl",serverUrl);
							request.setAttribute("tags", service.getTagsByCourse(c));
							request.setAttribute("rssfiles", service.getRssCourseFileList(c));
							request.setAttribute("mediaLst", c.getMedias());
							
							/* displays the .jsp view */
							getServletContext().getRequestDispatcher("/WEB-INF/views/recordinterface_flash.jsp").forward(request, response);
						}
						// High Quality
						else if( type.equals("hq")) {
							request.setAttribute("courseurl", coursesUrl + c.getMediaFolder() + "/" + c.getMediasFileName() + ".mp4");
							request.setAttribute("course", c);					
							Amphi a = service.getAmphi(c.getIpaddress());
							String amphi = a != null ? a.getName() : "";
							String building = service.getBuildingName(c.getIpaddress());
							request.setAttribute("amphi", amphi);
							request.setAttribute("building", building);
							request.setAttribute("serverUrl",serverUrl);

							/* Displays the view */
							getServletContext().getRequestDispatcher("/WEB-INF/views/recordinterface_hq.jsp").forward(request, response);

						}
						// TODO Full Flash
						/*else if(type.equals("fullflash")) {

					request.setAttribute("idcours",c.getCourseid());

					// Displays the view 
					getServletContext().getRequestDispatcher("/WEB-INF/views/recordinterface_fullflash.jsp").forward(request, response);

				}*/
						else if(c.isDownload() & (type.equals("mp3") || type.equals("ogg") || type.equals("zip") || type.equals("pdf"))) {
							String filename = coursesFolder + c.getMediaFolder() + "/" + c.getMediasFileName() + "." + type;

							/* Initializes the headers */
							response.setContentType("application/x-download");
							response.setHeader("Content-Disposition", "attachment; filename=" + c.getMediasFileName() + "." + type);

							/* Sends the file */
							OutputStream out = response.getOutputStream();
							service.returnFile(filename, out);
						}
						else if(c.isDownload() & (type.equals("videoslide"))) {
							String filename = coursesFolder + c.getMediaFolder() + "/" + c.getMediasFileName() + "_videoslide.mp4";

							/* Initializes the headers */
							response.setContentType("application/x-download");
							response.setHeader("Content-Disposition", "attachment; filename=" + c.getMediasFileName() + "_videoslide.mp4");

							/* Sends the file */
							OutputStream out = response.getOutputStream();
							service.returnFile(filename, out);
						}
						else if(type.equals("adddoc")) {
							String filename = coursesFolder + c.getMediaFolder() +"/additional_docs/" + c.getAdddocname();

							/* Initializes the headers */
							response.setContentType("application/x-download");
							response.setHeader("Content-Disposition", "attachment; filename=" + c.getAdddocname());

							/* Sends the file */
							OutputStream out = response.getOutputStream();
							service.returnFile(filename, out);
						}
					}
					else {
						ResourceBundle bundle = ResourceBundle.getBundle(BUNDLE_NAME, new Locale( (String) session.getAttribute("language")));
						request.setAttribute("messagetype", "error");
						request.setAttribute("message", bundle.getString("wrongAccessCode"));
						getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
					}
				}
			}
		}
		catch(DaoException de) {
			ResourceBundle bundle = ResourceBundle.getBundle(BUNDLE_NAME, new Locale( (String) session.getAttribute("language")));
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", bundle.getString("wrongAccessCode"));
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	/**
	 * Method to display the live interface
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void liveAccess(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String ip = request.getParameter("amphi");
		Amphi a = service.getAmphi(ip);
		String amphi = a != null ? a.getName() : ip;
		String building = service.getBuildingName(ip);
		//String url = "rtmp://" + flashServerIp + "/live&id=" + ip.replace('.', '_');
		
		String streamerUrl = "rtmp://" + flashServerIp + "/live";
		String fileUrl = ip.replace('.', '_');
				
		//To lock access of course with UDS account
		User user = null;		
		if(a!=null && a.isRestrictionuds()) {
			String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		
			if(casUser!=null) // Authentification CAS	
				user=service.getUser(casUser); // Gets the user from the session		
		}
				
		// if the user is not authenticated, redirection to authentication_cas
		if(a!=null && a.isRestrictionuds() && user==null) {
			response.sendRedirect("./authentication_cas?returnPage=liveaccess&amphi="+ip);
		}
		else if(a!=null && a.isRestrictionuds() && user!=null && !user.isActivate()) {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "You don't have access to this page");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);			
		}
		else {

			request.setAttribute("amphi", amphi);
			request.setAttribute("building", building);
			request.setAttribute("ip", ip);
			request.setAttribute("streamerUrl", streamerUrl);
			request.setAttribute("fileUrl", fileUrl);

			getServletContext().getRequestDispatcher("/WEB-INF/views/liveinterface.jsp").forward(request, response);

		}
	}
	
	/**
	 * Method to update the live slide
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void liveSlide(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String ip = request.getParameter("ip");
		String url = "../../live/" + ip.replace('.','_') + ".jpg";
		request.setAttribute("ip", ip);
		request.setAttribute("url", url);
		
		getServletContext().getRequestDispatcher("/WEB-INF/views/include/iframe_liveslide.jsp").forward(request, response);
	}
	
	/**
	 * Method to validate a course form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void validateCourse(HttpServletRequest request, HttpServletResponse response, String redirectUrl) 
		throws ServletException, IOException {
		
		Course c= new Course(
			Integer.parseInt(request.getParameter("courseid")),
			new Timestamp(Long.parseLong(request.getParameter("date"))),
			! request.getParameter("type").equals("") ? request.getParameter("type") : null,
			! request.getParameter("title").equals("") ? request.getParameter("title") : null,
			! request.getParameter("description").equals("") ? request.getParameter("description") : null,
			! request.getParameter("formation").equals("") ? request.getParameter("formation") : null,
			! request.getParameter("name").equals("") ? request.getParameter("name") : null,
			! request.getParameter("firstname").equals("") ? request.getParameter("firstname") : null,
			! request.getParameter("ipaddress").equals("") ? request.getParameter("ipaddress") : null,
			Integer.parseInt(request.getParameter("duration")),
			! request.getParameter("genre").equals("") ? request.getParameter("genre") : null,
			request.getParameter("visible") != null ? true : false,
			Integer.parseInt(request.getParameter("consultations")),
			! request.getParameter("timing").equals("") ? request.getParameter("timing") : null,
			! request.getParameter("mediaFolder").equals("") ? request.getParameter("mediaFolder") : null,
			! request.getParameter("userid").equals("0") ? Integer.parseInt(request.getParameter("userid")) : null,
			! request.getParameter("adddocname").equals("") ? request.getParameter("adddocname") : null,
			request.getParameter("download") != null ? true : false,
			request.getParameter("restrictionuds") != null ? true : false,
			Integer.parseInt(request.getParameter("mediatype"))
		);
		service.modifyCourse(c);
		
		// Delete TAGS
		service.deleteTag(Integer.parseInt(request.getParameter("courseid")));
		
		// ADD TAGS		
		List<String> listTmp=new ArrayList<String>();
		StringTokenizer st = new StringTokenizer(request.getParameter("tags"));
		while (st.hasMoreTokens()) {
			String token = st.nextToken();
			if(!listTmp.contains(token)) {
				service.addTag(new Tag(0, //is not used
					token, // the tag
					Integer.parseInt(request.getParameter("courseid"))) // the course
				);
				listTmp.add(token);
			}
		}
		
		/* Generation of the RSS files */
		service.generateRss(c, getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language, rssCategory, itunesAuthor, itunesSubtitle, itunesSummary, itunesImage, itunesCategory, itunesKeywords);
		response.sendRedirect(response.encodeRedirectURL(redirectUrl));
	}
	
	/**
	 * Method to validate a building form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void validateBuilding(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		if( ! (request.getParameter("name").equals("") || request.getParameter("imagefile").equals(""))) {
		
			int buildingId =  ! request.getParameter("buildingid").equals("") ? Integer.parseInt(request.getParameter("buildingid")) : 0;
			
			Building b = new Building(
				buildingId,
				request.getParameter("name"),
				request.getParameter("imagefile")
			);
			
			if(request.getParameter("action").equals("edit"))
				service.modifyBuilding(b);
			else
				service.addBuilding(b);
			response.sendRedirect(response.encodeRedirectURL("./admin_buildings"));
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "All fields must be completed");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	
	/**
	 * Method to validate an amphi form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void validateAmphi(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		if( ! (request.getParameter("name").equals("") || request.getParameter("ipaddress").equals(""))) {
		
			int amphiId =  ! request.getParameter("amphiid").equals("") ? Integer.parseInt(request.getParameter("amphiid")) : 0;
			
			Amphi a = new Amphi(
				amphiId,
				Integer.parseInt(request.getParameter("buildingid")),
				request.getParameter("name"),
				request.getParameter("ipaddress"),
				Boolean.parseBoolean(request.getParameter("status")),
				request.getParameter("gmapurl").equals("") ? null : request.getParameter("gmapurl"),
				request.getParameter("version"),
				request.getParameter("restrictionuds") != null ? true : false
			);
			
			String oldAmphiip = request.getParameter("oldAmphiip");
			
			if(request.getParameter("action").equals("edit"))
				service.modifyAmphi(a, oldAmphiip);
			else
				service.addAmphi(a);
			response.sendRedirect(response.encodeRedirectURL("./admin_amphis?buildingId=" + request.getParameter("buildingid")));
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "All fields must be completed");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	/**
	 * Method to validate an user form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void validateUser(HttpServletRequest request, HttpServletResponse response) 
	throws ServletException, IOException {
			
		if( ! (request.getParameter("login").equals(""))) {
			
			int userid =  ! request.getParameter("userid").equals("") ? Integer.parseInt(request.getParameter("userid")) : 0;
		
			User u = new User(
					userid,
					request.getParameter("login"),
					request.getParameter("email"),
					request.getParameter("firstname"),
					request.getParameter("lastname"),
					request.getParameter("profile"),
					request.getParameter("establishment"),
					request.getParameter("type"),
					request.getParameter("activate") != null ? true : false
			);
						
			if(request.getParameter("action").equals("edit"))
				service.modifyUser(u);
			else
				service.addUser(u);
			response.sendRedirect(response.encodeRedirectURL("./admin_users"));
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "Login field must be completed");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	/**
	 * Method to change the style of the website
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void changeStyle(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		String style = request.getParameter("style");
		/* Stores the style in the session */
		session.setAttribute("style", style);
		/* Stores the style in the cookies */
		Cookie styleCookie = new Cookie("style", style);
		styleCookie.setMaxAge(31536000);
		response.addCookie(styleCookie);
		
		/* Returns to the page before the thickbox call (stored in the session) */
		String previousPage = (String) session.getAttribute("previousPage");
		if( previousPage == null)
			previousPage = "/home";
		response.sendRedirect(response.encodeRedirectURL("." + previousPage));
	}
	
	/**
	 * Method to change the language of the website
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void changeLanguage(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		String language = request.getParameter("language");
		/* Stores the language in the session */
		session.setAttribute("language", language);
		/* Stores the language in the cookies */
		Cookie languageCookie = new Cookie("language", language);
		languageCookie.setMaxAge(31536000);
		response.addCookie(languageCookie);
		
		/* Returns to the page before the thickbox call (stored in the session) */
		String previousPage = (String) session.getAttribute("previousPage");
		if( previousPage == null)
			previousPage = "/home";
		response.sendRedirect(response.encodeRedirectURL("." + previousPage));
	}
	
	/**
	 * Method to create an univr course
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void univrCreation(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String message = "Veuillez suivre les indications à l'écran";
		String messageType = "information";

		int courseId = service.getNextCoursId();
		
		/* Retrieves the parameters sent by Univ-R */
		/* (parameters sent in LATIN9) */
		request.setCharacterEncoding("LATIN9");
		
		String uid = request.getParameter("uid");
		String uuid = request.getParameter("uuid");
		String groupCode = request.getParameter("codegroupe");
		
		String estab = request.getParameter("estab")!=null ? request.getParameter("estab") : "";
		
		String ip = request.getParameter("ip");
		
		String description = request.getParameter("description");
		String title = request.getParameter("titre");
		String genre = request.getParameter("genre");
		
		/* Verifies that all parameters were sent */
		if( uid != null && uuid != null && groupCode != null && ip != null && (! groupCode.equals("")) && (! ip.equals("")) && estab!=null) {
		
			if( service.getAmphi(ip) != null) {
				
				try {
					
					int user = Integer.parseInt(uid);
					int group = Integer.parseInt(groupCode);
					
					/* If the user is authorized, verifies his rights for the course */
					if( service.isUserAuth(user, uuid,estab)) {
												
						HashMap<String, String> map = service.getUserInfos(user,estab);
						String name = map.get("nom");
						String firstname = map.get("prenom");
						String formation = service.getGroupName(Integer.parseInt(groupCode),estab);
						
						String msg = "(id:" + courseId + ")";
						String clientResponse = service.sendMessageToClient(msg, ip, clientSocketPort,3000);
						
						
						/* If the client is not already recording */
						if( clientResponse.indexOf("!!! already recording !!!") == -1 ) {

							Course c = new Course(
									courseId,
									new Timestamp(new Date().getTime()),
									null, // The type can't be set yet
									title.equals("") ? null : title,
									description.equals("") ? null : description,
									formation.equals("") ? null : formation,
									name.equals("") ? null : name,
									firstname.equals("") ? null : firstname,
									ip,
									0, // The duration can't be set yet
									genre.equals("") ? null : genre,
									false,
									0,
									null, // The timing can't be set yet
									null, // The media folder can't be set yet
									null,
									null,
									true,
									false,
									Course.typeFlash+Course.typeMp3+Course.typeOgg+Course.typePdf+Course.typeZip+Course.typeVideoslide
							);
							
							Univr u = new Univr(courseId, user, group,estab);
							
							service.addUnivrCourse(c,u);
						}
						else {
							messageType = "error";
							message = "Error: The client already recording ";
							message += clientResponse;
							System.out.println(clientResponse);
						}
					}
					else {
						messageType = "error";
						message = "Error: User not authenticated";
					}
				}
				catch( NumberFormatException nfe) {
					messageType = "error";
					message = "Error: Wrong parameters";
					System.out.println("Wrong parameters !");
					System.out.println( nfe.toString());
				}
				catch( Exception e ) {
					messageType = "error";
					message = "Error: client connection problems";
					System.out.println("client connection problems");
					System.out.println( e.toString() );
					e.printStackTrace();
				}
			}
			else {
				messageType = "error";
				message = "Error: Amphi unknown";
				System.out.println("amphi unknown !");
			}
		}
		else {
			messageType = "error";
			message = "Error: Wrong parameters";
			System.out.println("Wrong parameters");
		}
		
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
	}
	
	/**
	 * Method to display an univr course
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void univrCourseAccess(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String message = "";
		String forwardUrl = "/WEB-INF/views/recordinterface_flash.jsp";
		
		String id = request.getParameter("id");
		String uid = request.getParameter("uid");
		String uuid = request.getParameter("uuid");
		
		String estab = request.getParameter("estab")!=null ? request.getParameter("estab") : "";
		
		/* Verifies that all parameters were sent */
		if( id != null && uid != null && uuid != null && estab!=null) {
		
			try {
				int courseId = Integer.parseInt(id);
				int userId = Integer.parseInt(uid);
				
				/* If the user is logged in, verification of his rights for the course */
				if( service.isUserAuth(userId, uuid,estab)) {
					
					if ( service.hasAccessToCourse(userId, courseId,estab)) {
						
						Course c = null;
						c = service.getCourse(courseId);	
						service.incrementConsultations(c);
						
						// To fix a bug with SSL and IE
						String slidesurl = null;
						if(request.getRequestURL().toString().substring(0, 5).equals("https") && coursesUrl.substring(0, 4).equals("http"))
							slidesurl = coursesUrl.replace("http", "https") + c.getMediaFolder() + "/screenshots/";
						else 
							slidesurl = coursesUrl + c.getMediaFolder() + "/screenshots/";
																						
						/* redirection to the FlvPlay JS interface */
						String courseExtension = "";
						if( c.getType().equals("audio"))
							courseExtension = ".mp3";
						else if( c.getType().equals("video"))
							courseExtension = ".flv";
						
						request.setAttribute("courseurl", coursesUrl + c.getMediaFolder() + "/" + c.getMediasFileName() + courseExtension);
						request.setAttribute("slidesurl", slidesurl);
						request.setAttribute("course", c);
						List<Slide> slides = service.getSlides(c.getCourseid());
						request.setAttribute("slides", slides);
						Amphi a = service.getAmphi(c.getIpaddress());
						String amphi = a != null ? a.getName() : c.getIpaddress();
						String building = service.getBuildingName(c.getIpaddress());
						request.setAttribute("amphi", amphi);
						request.setAttribute("building", building);
						if( c.getTiming().equals("n-1"))
							request.setAttribute("timing", 1);
						else
							request.setAttribute("timing", 0);
						
						request.setAttribute("serverUrl",serverUrl);
						request.setAttribute("tags", service.getTagsByCourse(c));
						request.setAttribute("univr", true);
						
					} else {
						message = "Error: access refused";
						request.setAttribute("messagetype", "error");
						request.setAttribute("message", message);
						forwardUrl = "/WEB-INF/views/message.jsp";
					}	 	
				}
				else {
					message = "Error: user don't authentificate";
					request.setAttribute("messagetype", "error");
					request.setAttribute("message", message);
					forwardUrl = "/WEB-INF/views/message.jsp";
				}
			}
			catch( NumberFormatException nfe) {
				nfe.printStackTrace();
				message = "Error: wrong parameters (number format)";
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", message);
				forwardUrl = "/WEB-INF/views/message.jsp";
			}
			catch( DaoException de) {
				de.printStackTrace();
				message = "Error: course " + id + " unknown";
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", message);
				forwardUrl = "/WEB-INF/views/message.jsp";
			}
		}
		else {
			message = "Error: wrong parameters";
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", message);
			forwardUrl = "/WEB-INF/views/message.jsp";
		}
		
		/* If an error has occured, diplays an error message */
		getServletContext().getRequestDispatcher(forwardUrl).forward(request, response);
	}
	
	/**
	 * Method to display the admin edit course page
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void DisplayAdminEditCourse(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		// Get the course
		Course c = service.getCourse(Integer.parseInt(request.getParameter("id")));
		
		// Getting tags of the course
		String tags="";
		List<Tag> listTags = service.getTagsByCourse(c);
		for(int i=0;i<listTags.size();i++) {
			if(i==0)
				tags=listTags.get(i).getTag();
			else
				tags=tags + " " + listTags.get(i).getTag();
		}
					
		request.setAttribute("tags", tags);
		request.setAttribute("course", c);
		request.setAttribute("posturl", "./admin_validatecourse");
		request.setAttribute("gobackurl", "./admin_courses");
		getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editcourse.jsp").forward(request, response);
		
	
	}
	
	/**
	 * Method to check version of clients in amphis
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void versionclient(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		if( request.getParameter("ip") != null) {
						
			if(request.getParameter("ip").equals("all")) {
				
				List<String> lstRes = new ArrayList<String>();
				
				List<Building> lstBuild=service.getBuildings();				
				for(int i=0;i<lstBuild.size();i++) {
					Building building = lstBuild.get(i);
					List<Amphi> lstAmphi= building.getAmphis();
					for(int j=0;j<lstAmphi.size();j++) {
						Amphi amp = lstAmphi.get(j);
						
						String message=building.getName() + ": " + amp.getName() + ": "; 
						String clientResponse=service.sendMessageToClient("VERSION", amp.getIpAddress(), clientSocketPort,500);
							
						// No Response from the client (timeout exception)
						if(clientResponse=="") {
							message=message+"no response from the client";
						}
						// Too old version
						else if(clientResponse==null) {
							message=message+"v 1.08 or less";
							amp.setVersion("v 1.08 or less");
							service.modifyAmphi(amp, amp.getIpAddress());
						}
						else {
							message=message+clientResponse;
							amp.setVersion(clientResponse);
							service.modifyAmphi(amp, amp.getIpAddress());
						}
												
						lstRes.add(message+"</br>");
					}
					lstRes.add("</br>");
				}
						
				request.setAttribute("versions", lstRes);
				
				/* Displays the view */ 
				getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_clientsversion.jsp").forward(request, response);				
			}
			else {
				String clientResponse = service.sendMessageToClient("VERSION", request.getParameter("ip"), clientSocketPort,3000);
				String message="Version: ";
				
				// No Response from the client (timeout exception)
				if(clientResponse=="") {
					message=message+"no response from the client";
				}
				// Too old version
				else if(clientResponse==null) {
					message=message+"v 1.08 or less";
					Amphi a = service.getAmphi(request.getParameter("ip"));
					a.setVersion("v 1.08 or less");
					service.modifyAmphi(a, request.getParameter("ip"));
				}
				else {
					message=message+clientResponse;
					Amphi a = service.getAmphi(request.getParameter("ip"));
					a.setVersion(clientResponse);
					service.modifyAmphi(a, request.getParameter("ip"));
				}

				request.setAttribute("messagetype", "info");
				request.setAttribute("message", message);
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
			}
		}
		else {
			String message = "Error: wrong parameters";
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", message);
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	/**
	 * Methode to validate a selection form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void validateSelection(HttpServletRequest request, HttpServletResponse response) 
	throws ServletException, IOException {
						
		int position =  ! request.getParameter("position").equals("") ? Integer.parseInt(request.getParameter("position")) : 0;
		
			Selection s = new Selection(
					position,
					!request.getParameter("idcourseselection").equals("") ? Integer.parseInt(request.getParameter("idcourseselection")) : 0,
					request.getParameter("formationcollection")
			);
						
			if(request.getParameter("action").equals("edit"))
				service.modifySelection(s);
			else
				service.addSelection(s);
			response.sendRedirect(response.encodeRedirectURL("./admin_selections"));	
	}
		
	
	/**
	 * Method to upload a document from myspace
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void myspaceAddDocUpload(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {

		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		

		User user = null;
		// Authentification CAS	
		if(casUser!=null) {
			// Gets the user from the session
			user=service.getUser(casUser);
		}
		// Authentification local
		else if(session.getAttribute("$userLocalLogin")!=null) {
			user=service.getUser(session.getAttribute("$userLocalLogin").toString());
		}

		if(user!=null && user.isActivate()) {

			String courseid = request.getParameter("courseid");

			if(courseid!=null) {
				// Get the course
				Course c = service.getCourse(Integer.parseInt(courseid));

				// Check user id
				if(c.getUserid()==user.getUserid()) {
					addDocUpload(request,response);
				}
				else { 
					request.setAttribute("messagetype", "error");
					request.setAttribute("message", "Error: You don't have access to this page");
					getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
				}		

			}
			else { 
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", "Error: You don't have access to this page");
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
			}	

		}
		else { 
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "Error: Wrong parameters");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}	
	}
	
	
	/**
	 * Methode to delete an additional document from myspace
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void myspaceDeleteAddDoc(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
	
		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);		

		User user = null;
		// Authentification CAS	
		if(casUser!=null) {
			// Gets the user from the session
			user=service.getUser(casUser);
		}
		// Authentification local
		else if(session.getAttribute("$userLocalLogin")!=null) {
			user=service.getUser(session.getAttribute("$userLocalLogin").toString());
		}

		if(user!=null && user.isActivate()) {
			
			// Get the course
			Course c = service.getCourse(Integer.parseInt(request.getParameter("courseid")));
			
			// Check user id
			if(c.getUserid()==user.getUserid()) {
				deleteAddDoc(request, response);
			}
			else { 
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", "Error: You don't have access to this page");
				getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
			}		
		}
		else { 
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "Error: You don't have access to this page");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}	
	}
	
	
	/**
	 * Method to upload a document
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	@SuppressWarnings("unchecked")
	private void addDocUpload(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {

		// Attribute
		String courseid, fileName, returnUrl;
		courseid = fileName = returnUrl = "";
		String message = "";
		String messageType = "information";
		String requestDispatcher = "/WEB-INF/views/message.jsp";
		
		if( ServletFileUpload.isMultipartContent(new ServletRequestContext(request)) ) {

			try {
				/* Prepares to parse the request to get the different elements of the POST */
				FileItemFactory factory = new DiskFileItemFactory();
				ServletFileUpload upload = new ServletFileUpload(factory);
				List<FileItem> items = upload.parseRequest(request);

				/* Processes the different elements */
				Iterator<FileItem> iter = items.iterator();
				while (iter.hasNext()) {
					FileItem item = (FileItem) iter.next();

					/* If the element is a form field, retrieves the info */
					if (item.isFormField()) {

						if(item.getFieldName().equals("courseid"))
							courseid = item.getString("UTF8");
						else if(item.getFieldName().equals("returnUrl"))
							returnUrl = item.getString("UTF8");

					} /* If the element is a file (the last element */
					else {
						fileName = item.getName();
						String extension = fileName.contains(".") ? fileName.substring(fileName.lastIndexOf('.') + 1,fileName.length()) : "";

						/* Checks the extension of the item to have a supported file format */				
						StringTokenizer stokadf = new StringTokenizer(addDocFormats);
						boolean isExtVal = false;
						while(stokadf.hasMoreTokens() && !isExtVal) {
							isExtVal = extension.equals(stokadf.nextToken());
						}
																		
						// Test the form
						if(fileName==null || fileName.equals("")) {
							messageType = "error";
							message = "File must be completed";							
						}
						/* Checks the extension of the item to have a supported file format */
						else if(!isExtVal) {
							messageType = "error";
							message = "Error: Not supported file format : " + extension;
						}
						else {
							// Get the course
							Course c = service.getCourse(Integer.parseInt(courseid));

							// Add the document to the course									
							service.addAdditionalDoc(c,item);
							requestDispatcher=returnUrl;
						}
					}
				}
			}
			catch( FileUploadException fue) {
				messageType = "error";
				message = "Error : File upload error";
			}
		}
		else {
			messageType = "error";
			message = "Error: Incorrect file upload request";
		}

		/* Displays the result of the upload process */
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher(requestDispatcher).forward(request, response);
	}
	
	
	/**
	 * Methode to delete an additional document
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void deleteAddDoc(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
				
		// Get the course
		Course c = service.getCourse(Integer.parseInt(request.getParameter("courseid")));

		// Delete the document to the course									
		service.deleteAdditionalDoc(c);
		
		/* Displays the result of the upload process */
		getServletContext().getRequestDispatcher(request.getParameter("returnUrl")).forward(request, response);
	}
	
	
	/**
	 * Send mail from the contact us form
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	private void sendMailContactUs(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		String subject = request.getParameter("subject");
		String useremail = request.getParameter("useremail");
		String yourmessage = request.getParameter("yourmessage");
		
		if(!adminEmail1.equals(""))
			service.sendMail(subject,"from: " + useremail + "\n\n" + yourmessage,adminEmail1);
		if(!adminEmail2.equals(""))
			service.sendMail(subject,"from: " + useremail + "\n\n" + yourmessage,adminEmail2);
		if(!adminEmail3.equals(""))
			service.sendMail(subject,"from: " + useremail + "\n\n" + yourmessage,adminEmail3);
		request.setAttribute("messagetype", "info");
		request.setAttribute("message", "E-mail successfully sent !");
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);

	
	}

	
}
