package org.ulpmm.univrav.web;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;

import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.fileupload.servlet.ServletRequestContext;
import org.ulpmm.univrav.dao.DaoException;
import org.ulpmm.univrav.dao.DatabaseImpl;
import org.ulpmm.univrav.dao.FileSystemImpl;
import org.ulpmm.univrav.dao.UnivrDaoImpl;
import org.ulpmm.univrav.entities.Amphi;
import org.ulpmm.univrav.entities.Building;
import org.ulpmm.univrav.entities.Course;
import org.ulpmm.univrav.entities.Slide;
import org.ulpmm.univrav.entities.Teacher;
import org.ulpmm.univrav.entities.Univr;
import org.ulpmm.univrav.service.ServiceImpl;


public class Application extends HttpServlet {

	private static final long serialVersionUID = 1L;
	
	// Instance of the service layer
	private ServiceImpl service;
	
	// Used to managed user sessions
	private HttpSession session;
	
	// The name of the bundle to search the corresponding language properties files
	private static final String BUNDLE_NAME = "org.ulpmm.univrav.language.messages"; 
	
	
	/* Configuration parameters */
	
	// The Url to access to the course on the Internet
	private static String coursesUrl;
	
	// The Url to access to the statistics generated by Webalizer
	private static String statsUrl;
	private static String oldStatsUrl;
	
	// Folders on the file system
	private static String ftpFolder;
	private static String coursesFolder; 
	private static String liveFolder; 
	
	// Default media filenames in the archive sent by the client
	private static String defaultMp3File;
	private static String defaultRmFile;
	private static String defaultSmilFile;
	private static String defaultFlashFile;
	private static String defaultScreenshotsFolder;
	
	// Copyright comment
	private static String comment;
	
	// IP address of the Flash Server for the video live
	private static String flashServerIp;
		
	// The port used by the audio live
	//private static int audioLivePort;
	
	// The settings of the RSS files
	private static String rssTitle;
	private static String rssName;
	private static String rssDescription;
	private static String serverUrl;
	private static String rssImageUrl;
	private static String recordedInterfaceUrl;
	private static String language;
	
	// The numbers of courses to display at the same time
	private static int homeCourseNumber;
	private static int recordedCourseNumber;
	
	// The default style
	private static String defaultStyle;
	
	// The keyword to identify the tests to delete (genre is equal to this keyword)
	private static String testKeyWord1;

	// The keyword to identify the tests to hide (title begins with this keyword)
	private static String testKeyWord2;
	private static String testKeyWord3;
	
	// The client port for the Univ-R integration
	private static int clientSocketPort;
	
	/**
	 * Initialization of the servlet. <br>
	 *
	 * @throws ServletException if an error occurs
	 */
	public void init() throws ServletException {
		
		System.out.println("Univ-R AV : init method called");
		
		/* Gets an instance of the service layer */	
		service = new ServiceImpl();
		
		Properties p = new Properties();
		
		try {
			
			/* configuration parameters loading */
			
			p.load(new FileInputStream(getServletContext().getRealPath("/conf") + "/univrav.properties"));
			
			// The Url to access to the course on internet
			coursesUrl = p.getProperty("coursesUrl");
			
			// The Url to access to the statistics generated by Webalizer
			statsUrl = p.getProperty("statsUrl");
			oldStatsUrl = p.getProperty("oldStatsUrl");
			
			// Folders on the file system
			ftpFolder = p.getProperty("ftpFolder");
			coursesFolder = p.getProperty("coursesFolder");
			liveFolder = p.getProperty("liveFolder");
			
			// Default media filenames in the archive sent by the client
			defaultMp3File = p.getProperty("defaultMp3File");
			defaultRmFile = p.getProperty("defaultRmFile");
			defaultSmilFile = p.getProperty("defaultSmilFile");
			defaultFlashFile = p.getProperty("defaultFlashFile");
			defaultScreenshotsFolder = p.getProperty("defaultScreenshotsFolder");
			
			// Copyright comment
			comment = service.cleanString(p.getProperty("comment"));
			
			// IP address of the Flash Server for the video live
			flashServerIp = p.getProperty("flashServerIp");
						
			// The port used by the audio live
			//audioLivePort = Integer.parseInt(p.getProperty("audioLivePort"));
			
			// The settings of the RSS files
			rssTitle = p.getProperty("rssTitle");
			rssName = p.getProperty("rssName");
			rssDescription = p.getProperty("rssDescription");
			serverUrl = p.getProperty("serverUrl");
			rssImageUrl = p.getProperty("rssImageUrl");
			recordedInterfaceUrl = p.getProperty("recordedInterfaceUrl");
			language = p.getProperty("language");
			
			// The numbers of courses to display at the same time
			homeCourseNumber = Integer.parseInt(p.getProperty("homeCourseNumber"));
			recordedCourseNumber = Integer.parseInt(p.getProperty("recordedCourseNumber"));
			
			// The keyword to identify the tests to delete (genre is equal to this keyword)
			testKeyWord1 = p.getProperty("testKeyWord1");

			// The keyword to identify the tests to hide (title begins with this keyword)
			testKeyWord2 = p.getProperty("testKeyWord2");
			testKeyWord3 = p.getProperty("testKeyWord3");
			
			// The default style
			defaultStyle = p.getProperty("defaultStyle");
			
			// The client port for the Univ-R integration
			clientSocketPort = Integer.parseInt(p.getProperty("clientSocketPort"));
			
			
			/* Datasource retrieving */
			
			InitialContext cxt = new InitialContext();
			if ( cxt == null ) {
			   throw new Exception("No context found!");
			}

			DataSource ds = (DataSource) cxt.lookup( "java:/comp/env/jdbc/postgres" );

			if ( ds == null ) {
			   throw new Exception("Data source not found!");
			}
			
			
			/* Creates the instances of the data access layer */
			
			DatabaseImpl db = new DatabaseImpl(ds);
			FileSystemImpl fs = new FileSystemImpl(
					getServletContext().getRealPath("/") + "scripts",
					ftpFolder, coursesFolder, liveFolder, coursesUrl,
					defaultMp3File, defaultRmFile, defaultSmilFile, 
					defaultFlashFile, defaultScreenshotsFolder, comment
			);
			UnivrDaoImpl ud = new UnivrDaoImpl();
			
			
			/* Links the data access layer to the service layer */
			
			service.setDb(db);
			service.setFs(fs);
			service.setUd(ud);
			
			
			/* Creation of the RSS files */
			
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language);
			
		}
		catch( IOException e) {
			System.out.println("Impossible to find the configuration file");
			e.printStackTrace();
			destroy();
		}
		catch( DaoException de) {
			de.printStackTrace();
			destroy();
		}
		catch( Exception e) {
			e.printStackTrace();
			destroy();
		}
	}
	
	/**
	 * Destruction of the servlet. <br>
	 */
	public void destroy() {
		super.destroy(); // Just puts "destroy" string in log
	}

	/**
	 * The doGet method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to get.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		
		/* Sets the character encoding as UTF-8 */
		request.setCharacterEncoding("UTF-8");

		/* Retrieves the current session or creates a new one if no session exists */
		session = request.getSession(true);
		
		String style = null;
		String language = null;
		
		/* If the session didn't exist and has just been created */
		if( session.isNew()) {
			
			/* Checks if the style and language are stored in the cookies */
			
			Cookie[] cookies = request.getCookies();
			
			// If the browser has not disabled cookies ...
			if( cookies != null ) {
				for(int i=0 ; i<cookies.length ; i++) {
					String cookieName = cookies[i].getName();
					if( cookieName.equals("style") )
						style=cookies[i].getValue();
					else if( cookieName.equals("language") ) 
						language = cookies[i].getValue();
				}
			}
			
			/* If not, store the default values in the cookies */
			
			if( style == null || style.equals("style1") || style.equals("style2")) {
				style = defaultStyle;
				Cookie styleCookie = new Cookie("style", style);
				styleCookie.setMaxAge(31536000);
				response.addCookie(styleCookie);
			}
			
			if( language == null ){
				language = request.getLocale().getLanguage();
				Cookie languageCookie = new Cookie("language", language);
				languageCookie.setMaxAge(31536000);
				response.addCookie(languageCookie);
			}
			
			/* Store them in the session */
			session.setAttribute("style", style);
			session.setAttribute("language", language);
		}
		
		/* Retrieves the path info from the browser's URL */
		String page = request.getPathInfo();
		
		if( page == null )
			page = "/home";
		
		if( page.equals("/home"))
			displayHomePage(request, response);
		else if( page.equals("/live"))
			displayLivePage(request, response);
		else if( page.equals("/recorded"))
			displayRecordedPage(request, response);
		else if( page.equals("/search"))
			displaySearchResults(request, response);
		else if( page.equals("/rss")) 
			displayRssPage(request, response);
		else if (page.equals("/courses"))
			displayCourses(request, response);
		else if( page.equals("/upload"))
			uploadAccess(request, response);
		else if( page.equals("/add") || page.equals("/UploadClient"))
			addCourse(request, response);
		else if( page.equals("/mediaupload"))
			mediaUpload(request, response);
		else if(page.equals("/livestate") || page.equals("/LiveState"))
			liveState(request, response);
		else if( page.equals("/courseaccess")) 
			courseAccess(request, response);
		else if( page.equals("/liveaccess"))
			liveAccess(request, response);
		else if( page.equals("/help")) {
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/help");
			getServletContext().getRequestDispatcher("/WEB-INF/views/help.jsp").forward(request, response);
		}
		else if( page.equals("/test"))
			displayTestPage(request, response);
		else if( page.equals("/changestyle"))
			changeStyle(request, response);
		else if( page.equals("/changelanguage"))
			changeLanguage(request, response);
		else if( page.equals("/deletetests")) {
			service.deleteTests(testKeyWord1);
			service.hideTests(testKeyWord2, testKeyWord3);
			/* Regeneration of the RSS files */
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language);
		}
		else if( page.equals("/thick_codeform")) {
			request.setAttribute("id", request.getParameter("id"));
			request.setAttribute("type", request.getParameter("type"));
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_codeform.jsp").forward(request, response);
		}
		else if( page.equals("/thick_styles")) {
			List<String> styles = service.getStyles(getServletContext().getRealPath("/") + "files/styles/");
			request.setAttribute("styles", styles );
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_styles.jsp").forward(request, response);
		}
		else if( page.equals("/thick_languages")) {
			List<String> languages = service.getLanguages(getServletContext().getRealPath("/") + "WEB-INF/classes/org/ulpmm/univrav/language");
			request.setAttribute("languages", languages );
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_languages.jsp").forward(request, response);
		}
		else if( page.equals("/thick_legal")) 
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_legal.jsp").forward(request, response);
		else if( page.equals("/thick_download"))
			getServletContext().getRequestDispatcher("/WEB-INF/views/include/thick_download.jsp").forward(request, response);
		else if( page.equals("/iframe_liveslide"))
			liveSlide(request, response);
		else if( page.equals("/admin_home")) {
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/admin_home");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_home.jsp").forward(request, response);
		}
		else if( page.equals("/admin_courses")) {
			List<Course> courses = service.getAllCourses();
			request.setAttribute("courses",courses);
			request.setAttribute("number", courses.size());
			request.setAttribute("viewurl", "./admin_courses");
			request.setAttribute("editurl", "./admin_editcourse");
			request.setAttribute("deleteurl", "./admin_deletecourse");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_courses.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editcourse")) {
			request.setAttribute("course", service.getCourse(Integer.parseInt(request.getParameter("id"))));
			request.setAttribute("posturl", "./admin_validatecourse");
			request.setAttribute("gobackurl", "./admin_courses");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editcourse.jsp").forward(request, response);
		}
		else if( page.equals("/admin_deletecourse")) {
			int courseid = Integer.parseInt(request.getParameter("id"));
			service.deleteCourse(courseid, service.getCourse(courseid).getMediaFolder());
			/* Regeneration of the RSS files */
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language);
			response.sendRedirect(response.encodeRedirectURL("./admin_courses"));
		}
		else if( page.equals("/admin_validatecourse"))
			validateCourse(request, response, "./admin_courses");
		else if( page.equals("/admin_buildings")) {
			request.setAttribute("buildings", service.getBuildings());
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_buildings.jsp").forward(request, response);
		}
		else if( page.equals("/admin_addbuilding")) {
			request.setAttribute("action","add"); 
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editbuilding.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editbuilding")) {
			request.setAttribute("action","edit"); 
			request.setAttribute("building", service.getBuilding(Integer.parseInt(request.getParameter("id"))));
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editbuilding.jsp").forward(request, response);
		}
		else if( page.equals("/admin_deletebuilding")) {
			int buildingid = Integer.parseInt(request.getParameter("id"));
			service.deleteBuilding(buildingid);
			response.sendRedirect(response.encodeRedirectURL("./admin_buildings"));
		}
		else if( page.equals("/admin_validatebuilding"))
			validateBuilding(request, response);
		else if( page.equals("/admin_amphis")) {
			request.setAttribute("buildingId", request.getParameter("buildingId"));
			request.setAttribute("buildingName", service.getBuilding(Integer.parseInt(request.getParameter("buildingId"))).getName());
			request.setAttribute("amphis", service.getAmphis(Integer.parseInt(request.getParameter("buildingId"))));
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_amphis.jsp").forward(request, response);
		}
		else if( page.equals("/admin_addamphi")) {
			request.setAttribute("buildingId", request.getParameter("buildingId"));
			request.setAttribute("action","add"); 
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editamphi.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editamphi")) {
			request.setAttribute("buildingId", request.getParameter("buildingId"));
			request.setAttribute("buildingName", service.getBuilding(Integer.parseInt(request.getParameter("buildingId"))).getName());
			request.setAttribute("action","edit"); 
			request.setAttribute("amphi", service.getAmphi(Integer.parseInt(request.getParameter("id"))));
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editamphi.jsp").forward(request, response);
		}
		else if( page.equals("/admin_deleteamphi")) {
			int amphiid = Integer.parseInt(request.getParameter("id"));
			service.deleteAmphi(amphiid);
			response.sendRedirect(response.encodeRedirectURL("./admin_amphis?buildingId=" + request.getParameter("buildingId")));
		}
		else if( page.equals("/admin_validateamphi"))
			validateAmphi(request, response);
		else if( page.equals("/admin_univr")) {
			List<Course> courses = service.getUnivrCourses();
			request.setAttribute("courses", courses);
			request.setAttribute("number", courses.size());
			request.setAttribute("viewurl", "./admin_univr");
			request.setAttribute("editurl", "./admin_editunivr");
			request.setAttribute("deleteurl", "./admin_deleteunivr");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_courses.jsp").forward(request, response);
		}
		else if( page.equals("/admin_editunivr")) {
			request.setAttribute("course", service.getCourse(Integer.parseInt(request.getParameter("id"))));
			request.setAttribute("posturl", "./admin_validateunivr");
			request.setAttribute("gobackurl", "./admin_univr");
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_editcourse.jsp").forward(request, response);
		}
		else if( page.equals("/admin_deleteunivr")) {
			int courseid = Integer.parseInt(request.getParameter("id"));
			service.deleteCourse(courseid, service.getCourse(courseid).getMediaFolder());
			service.deleteUnivr(courseid);
			/* Regeneration of the RSS files */
			service.generateRss(getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language);
			response.sendRedirect(response.encodeRedirectURL("./admin_univr"));
		}
		else if( page.equals("/admin_validateunivr"))
			validateCourse(request, response, "./admin_univr");
		else if( page.equals("/admin_teachers")) {
			request.setAttribute("viewurl", "./admin_teachers");
			List<Teacher> teachers = service.getAllTeachers();
			request.setAttribute("teachers", teachers );
			request.setAttribute("number", teachers.size());
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_teachers.jsp").forward(request, response);
		}
		else if( page.equals("/admin_stats")) {
			request.setAttribute("diskspaceinfo", service.getDiskSpaceInfo());
			request.setAttribute("statsUrl", statsUrl);
			request.setAttribute("oldStatsUrl", oldStatsUrl);
			getServletContext().getRequestDispatcher("/WEB-INF/views/admin/admin_stats.jsp").forward(request, response);
		}
		else if( page.equals("/univr_creation")) 
			univrCreation(request, response);
		else if( page.equals("/univr_courseaccess")) 
			univrCourseAccess(request, response);
		else
			displayHomePage(request, response);
	}

	/**
	 * The doPost method of the servlet. <br>
	 *
	 * This method is called when a form has its tag value method equals to post.
	 * 
	 * @param request the request send by the client to the server
	 * @param response the response send by the server to the client
	 * @throws ServletException if an error occurred
	 * @throws IOException if an error occurred
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		/* Calls the DoGet method */
		doGet(request, response);
	}
	
	private void displayHomePage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		/* initializes the model */
		request.setAttribute("teachers", service.getTeachers());
		request.setAttribute("formations", service.getFormations());
		request.setAttribute("courses", service.getNLastCourses(homeCourseNumber, testKeyWord2, testKeyWord3));
		request.setAttribute("rssFileName", rssName + ".xml");
		
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/home");
		
		/* Displays the view */
		getServletContext().getRequestDispatcher("/WEB-INF/views/home.jsp").forward(request, response);
	}
	
	private void displayLivePage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {  
		/* initializes the model */
		request.setAttribute("buildings", service.getBuildings());
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/live");
				
		/* Displays the view */ 
		getServletContext().getRequestDispatcher("/WEB-INF/views/live.jsp").forward(request, response);
	}
	
	private void displayRecordedPage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		int start = 0;
		int pageNumber;
		
		/* initializes the model */
		if( request.getParameter("page") != null) {
			pageNumber = Integer.parseInt( request.getParameter("page"));
			start = recordedCourseNumber * (pageNumber - 1) ;
		}
		else
			pageNumber = 1;
		
		request.setAttribute("page", pageNumber);
		request.setAttribute("teachers", service.getTeachers());
		request.setAttribute("formations", service.getFormations());
		request.setAttribute("courses", service.getCourses(recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("items", service.getCourseNumber(testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("number", recordedCourseNumber);
		request.setAttribute("resultPage", "recorded");
		
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/recorded?page=" + pageNumber);
		
		/* Displays the view */
		getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
	}
	
	private void displayRssPage(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {  
		
		//Number of Teachers with RSS, for the list in the jsp page
		request.setAttribute("nbrTeachersRss",service.getTeachersWithRss().size());
		// Rss Files
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
				
		/* Displays the view */ 
		getServletContext().getRequestDispatcher("/WEB-INF/views/rss.jsp").forward(request, response);
	}
	
	private void displayTestPage(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		int start = 0;
		int pageNumber;
		
		/* initializes the model */
		if( request.getParameter("page") != null) {
			pageNumber = Integer.parseInt( request.getParameter("page"));
			start = recordedCourseNumber * (pageNumber - 1) ;
		}
		else
			pageNumber = 1;
		
		request.setAttribute("page", pageNumber);
		request.setAttribute("teachers", service.getTeachers());
		request.setAttribute("formations", service.getFormations());
		request.setAttribute("courses", service.getTests(recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("items", service.getTestNumber(testKeyWord1, testKeyWord2, testKeyWord3));
		request.setAttribute("number", recordedCourseNumber);
		request.setAttribute("resultPage", "test");
		
		request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
		
		/* Saves the page for the style selection thickbox return */
		session.setAttribute("previousPage", "/test?page=" + pageNumber);
		
		/* Displays the view */
		getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
	}
	
	@SuppressWarnings("unchecked")
	private void displaySearchResults(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		int start = 0;
		int pageNumber;
		
		HashMap<String, String> params = new HashMap<String, String>();
		
		if( request.getMethod().equals("POST")) { // The form has just been posted
			
			pageNumber = 1;			
			
			/* Puts the search paramaters in a HashMap object */
			if( request.getParameter("audio") != null && request.getParameter("video") == null ) 
				params.put("type", "audio");
			else if( request.getParameter("audio") == null && request.getParameter("video") != null ) 
				params.put("type", "video");
			else if( request.getParameter("audio") == null && request.getParameter("video") == null ) 
				params.put("type", "");
			
			if( request.getParameter("fullname") != null && ! request.getParameter("fullname").equals("*") ) 
				params.put("fullname", request.getParameter("fullname"));
			
			if( request.getParameter("formation") != null && ! request.getParameter("formation").equals("*") ) 
				params.put("formation", request.getParameter("formation"));
			
			if( request.getParameter("keyword") != null && ! request.getParameter("keyword").equals("") ) 
				params.put("keyword", request.getParameter("keyword"));
			
			/* Saves the hashmap in the session */
			session.setAttribute("params", params);
		}
		else { // The user has clicked on a pagination link
			
			pageNumber = Integer.parseInt( request.getParameter("page"));
			start = recordedCourseNumber * (pageNumber - 1) ;
			
			params = (HashMap<String, String>) session.getAttribute("params");
		}
		
		if( params != null) {
			/* Saves the parameters of the form */
			if( params.get("type") == null ) { 
				request.setAttribute("audio", "checked");
				request.setAttribute("video", "checked");
			}
			else if( (params.get("type")).equals("audio") ) {
				request.setAttribute("audio", "checked");
			}
			else if( (params.get("type")).equals("video") ) {
				request.setAttribute("video", "checked");
			}
			
			if( params.get("fullname") != null && ! params.get("fullname").equals("*") ) {
				request.setAttribute("nameSelected", params.get("fullname"));
			}
			
			if( params.get("formation") != null && ! params.get("formation").equals("*") ) {
				request.setAttribute("formationSelected", params.get("formation"));
			}
			
			if( params.get("keyword") != null && ! params.get("keyword").equals("") ) {
				request.setAttribute("keyword", params.get("keyword"));
			}
			
			request.setAttribute("page", pageNumber);
			request.setAttribute("teachers", service.getTeachers());
			request.setAttribute("formations", service.getFormations());
			request.setAttribute("courses", service.getCourses(params, recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("items", service.getCourseNumber(params,testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("number", recordedCourseNumber);
			request.setAttribute("resultPage", "search");
			
			request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssName));
			
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/search?page=" + pageNumber);
			
			/* Displays the view */
			getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
		}
		else { // if the session is not valid anymore
			response.sendRedirect("./recorded");
		}
	}
	
	
	private void displayCourses(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {
		
		int start = 0;
		int pageNumber=1;
		
		HashMap<String, String> params = new HashMap<String, String>();
		
		if( request.getParameter("author") != null) 
			params.put("fullname", request.getParameter("author"));
		
		if( request.getParameter("formation") != null) 
			params.put("formation", request.getParameter("formation"));
		
		/* Saves the hashmap in the session */
		session.setAttribute("params", params);
		
		if( params != null) {
			
			String rssNamePar=rssName;
			
			request.setAttribute("audio", "checked");
			request.setAttribute("video", "checked");
							
			if( params.get("fullname") != null) {
				request.setAttribute("nameSelected", params.get("fullname"));
				rssNamePar=service.cleanFileName(params.get("fullname"));
			}
			
			// Priority for the rss "formation"
			if( params.get("formation") != null ) {
				request.setAttribute("formationSelected", params.get("formation"));
				rssNamePar=service.cleanFileName(params.get("formation"));
			}
									
			request.setAttribute("page", pageNumber);
			request.setAttribute("teachers", service.getTeachers());
			request.setAttribute("formations", service.getFormations());	
			request.setAttribute("courses", service.getCourses(params, recordedCourseNumber, start, testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("items", service.getCourseNumber(params,testKeyWord1, testKeyWord2, testKeyWord3));
			request.setAttribute("number", recordedCourseNumber);
			request.setAttribute("resultPage", "search");
			request.setAttribute("rssfiles", service.getRssFileList(rssTitle, rssNamePar));
			
			/* Saves the page for the style selection thickbox return */
			session.setAttribute("previousPage", "/search?page=" + pageNumber);
			
			/* Displays the view */
			getServletContext().getRequestDispatcher("/WEB-INF/views/recorded.jsp").forward(request, response);
		}
		else { // if the session is not valid anymore
			response.sendRedirect("./recorded");
		}
	}
	
	
	/**
	 *  Checks the access to the upload page
	 */
	/*private void uploadAccess(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		String message = "";
		String forwardUrl = "/WEB-INF/views/uploadpage.jsp";
		//TODO Establishment, to do
		String estab = request.getParameter("estab");
		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);
		
		// If the user is authenticated 
		if( casUser != null) {
			HashMap<String, String> map = service.getUserInfos(casUser,estab); // retrieves the info from the user
			
			// Determines wether the user is a student or a teacher 
			String idrole = map != null ? map.get("idrole") : "2";
			
			if( idrole.equals("1")) { // teacher -> forward to the upload page
				request.setAttribute("name", map.get("nom"));
				request.setAttribute("firstname", map.get("prenom"));
			}
			else { // student or other -> forward to an error page
				message = "Error: You don't have access to this page";
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", message);
				forwardUrl = "/WEB-INF/views/message.jsp";
			}
			
			getServletContext().getRequestDispatcher(forwardUrl).forward(request, response);
		}
	}*/
	//TODO A FAIRE
	private void uploadAccess(HttpServletRequest request, HttpServletResponse response)
	throws ServletException, IOException {

	//	String message = "";
		String forwardUrl = "/WEB-INF/views/uploadpage.jsp";
		//TODO Establishment, to do
//		String estab = request.getParameter("estab");
/*		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);

		// If the user is authenticated 
		if( casUser != null) {
			HashMap<String, String> map = service.getUserInfos(casUser,estab); // retrieves the info from the user

			// Determines wether the user is a student or a teacher
			String idrole = map != null ? map.get("idrole") : "2";

			if( idrole.equals("1")) { // teacher -> forward to the upload page
				request.setAttribute("name", map.get("nom"));
				request.setAttribute("firstname", map.get("prenom"));
			}
			else { // student or other -> forward to an error page
				message = "Error: You don't have access to this page";
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", message);
				forwardUrl = "/WEB-INF/views/message.jsp";
			}

			getServletContext().getRequestDispatcher(forwardUrl).forward(request, response);
		}*/
		getServletContext().getRequestDispatcher(forwardUrl).forward(request, response);
	}
	
	private void addCourse(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		String id, title, description, mediapath, media, timing, name, firstname, formation, genre;
		String message = "";
		String messageType = "information";
		
		/* The client sends parameters in the ISO8859-15 encoding */
		request.setCharacterEncoding("ISO8859-15");
		
		/* Retrieves the parameters sent by the client */
		id = request.getParameter("id");
		mediapath = request.getParameter("mediapath");
		timing = request.getParameter("timing");
		description = service.cleanString(request.getParameter("description"));
		title = service.cleanString(request.getParameter("title"));
		name = service.cleanString(request.getParameter("name"));
		firstname = service.cleanString(request.getParameter("firstname"));
		formation = service.cleanString(request.getParameter("ue"));
		genre = request.getParameter("genre");
		
		/* Verifies that all essential parameters are sent, cancels the upload if not */
		if(id != null && description != null && mediapath != null && title != null && name != null && formation != null) {
			
			if( timing == null )
				timing = "n-1";
			
			String clientIP = request.getRemoteAddr();
			
			/* Displays the parameters retrieved */
			/*message += "ID : " + id + "<br/>";
			message += "Title : " + title + "<br/>";
			message += "Description : " + description + "<br/>";
			message += "Mediapath : " + mediapath + "<br/>";
			message += "Teacher : " + name + " " + firstname + "<br>";
			message += "UE : " + formation + "<br>";
			message += "Genre : " + genre + "<br>";
			message += "Timing : " + timing + "<br>";*/
			
			/* Retrieves the filename from the media path */
			media = mediapath.substring(mediapath.lastIndexOf("\\") + 1, mediapath.length());
			if( media.length() == mediapath.length() )
				media = mediapath.substring(mediapath.lastIndexOf("/") + 1, mediapath.length());
			
			message += "Media : " + media + "<br/>";
			
			Course c;
			
			try {
			
				// Standard course
				if( id.equals("") || id.equals("(id:no)") || id.equals("None") ) {
					c = new Course(
							service.getNextCoursId(),
							new Timestamp(new Date().getTime()),
							null, // The type can't be set yet
							title.equals("") ? null : title,
							description.equals("") ? null : description,
							formation.equals("") ? null : formation,
							name.equals("") ? null : name,
							(firstname == null || firstname.equals("")) ? null : firstname,
							clientIP,
							0, // The duration can't be set yet
							(genre == null || genre.equals("")) ? null : genre,
							true,
							0,
							timing,
							null, // The media folder can't be set yet
							false
					);
					service.addCourse(c, media, getServletContext().getRealPath("/rss"), 
							rssName, rssTitle, rssDescription, serverUrl, 
							rssImageUrl, recordedInterfaceUrl, language);
				}
				else { // Univ-R course
					int courseid = Integer.parseInt(id);
					c = service.getCourse(courseid);
					Univr u = service.getUnivr(courseid);
					c.setDate(new Timestamp(new Date().getTime()));
					c.setVisible(false);
					c.setTiming(timing);
					service.completeUnivrCourse(c, u, media, getServletContext().getRealPath("/rss"), 
							rssName, rssTitle, rssDescription, serverUrl, 
							rssImageUrl, recordedInterfaceUrl, language);
				}
				
				message = "File successfully sent !";
			}
			catch( DaoException de) {
				messageType = "error";
				message = "Error : Database error";
			}
								
		}
		else {
			messageType = "error";
			message = "Error: One ore more parameters have not been given";
		}
		
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
	}
	
	@SuppressWarnings("unchecked")
	/**
	 * Processes the upload of a media file to convert it to a course
	 */
	/*private void mediaUpload(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
   		String title, description, name, firstname, date, formation, genre;
   		String message = "";
		String messageType = "information";
   		
   		Calendar cal = new GregorianCalendar();        	
   	
   		title = description = name = firstname = date = formation = genre = "";

   		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
   		Date d = new Date();
   		boolean continuer=true;
   	
   		//TODO Establishment, to do
		String estab = request.getParameter("estab");
		
   		String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);
   		
   		// If the user is authenticated 
		if( casUser != null) {
			HashMap<String, String> map = service.getUserInfos(casUser,estab); // retrieves the info from the user
			
			// Determines wether the user is a student or a teacher 
			String idrole = map.get("idrole");
			name = map.get("nom");
			firstname = map.get("prenom");
			
			if( idrole.equals("1")) { // teacher -> forward to the upload page
								
				// Tests if the request is a good media upload request 
		   		
				
				if( ServletFileUpload.isMultipartContent(new ServletRequestContext(request)) ) {
					
					try {
						// Prepares to parse the request to get the different elements of the POST 
						FileItemFactory factory = new DiskFileItemFactory();
						ServletFileUpload upload = new ServletFileUpload(factory);
						List<FileItem> items = upload.parseRequest(request);
						
						// Processes the different elements 
						Iterator<FileItem> iter = items.iterator();
						while (iter.hasNext() && continuer) {
						    FileItem item = (FileItem) iter.next();
				
						    // If the element is a form field, retrieves the info 
						    if (item.isFormField()) {
						        
						    	if(item.getFieldName().equals("title"))
						        	title = item.getString("UTF8");
						    	if(item.getFieldName().equals("description"))
						        	description = item.getString("UTF8");
						        else if(item.getFieldName().equals("date")){
						        	date = item.getString("UTF8");
						        	try {
							        	d = sdf.parse(date);					        	
						        	}
						        	catch( ParseException pe) {
						        		pe.printStackTrace();
						        	}
						        	finally {
						        		cal.setTime(d);
						        	}
						        }
						        else if(item.getFieldName().equals("formation"))
						        	formation = item.getString("UTF8");
						        else if(item.getFieldName().equals("genre")) {
						        	genre = item.getString("UTF8");
						        }
						    	
						    } // If the element is a file 
						    else {
						    	String fileName = item.getName();
						    	String extension = fileName.contains(".") ? fileName.substring(fileName.lastIndexOf('.') + 1,fileName.length()) : "";
						    	
						    	// Checks the extension of the item to have a supported file format 
						    	if( extension.equals("mp3") || extension.equals("ogg") || extension.equals("avi") || extension.equals("divx") 
						    			|| extension.equals("rm") || extension.equals("rv") || extension.equals("mp4") || extension.equals("mpg") 
						    			|| extension.equals("mpeg") || extension.equals("mov") || extension.equals("wmv") || extension.equals("mkv") ) {
						    	
							    	String clientIP = request.getRemoteAddr();
							    	String timing = "n-1";
							    	
							    	Course c = new Course(
											service.getNextCoursId(),
											new Timestamp(new Date().getTime()),
											null, // The type can't be set yet
											title.equals("") ? null : title,
											description.equals("") ? null : description,
											formation.equals("") ? null : formation,
											(name == null || name.equals("")) ? null : name,
											(firstname == null || firstname.equals("")) ? null : firstname,
											clientIP,
											0, // The duration can't be set yet
											(genre == null || genre.equals("")) ? null : genre,
											true,
											0,
											timing,
											null // The media folder can't be set yet
									);
									
							    	// Sends the creation of the course to the service layer 
							    	service.mediaUpload(c, item, getServletContext().getRealPath("/rss"), 
											rssName, rssTitle, rssDescription, serverUrl, 
											rssImageUrl, recordedInterfaceUrl, language);
									
									message = "File successfully sent ! ";
									message += "Don't panic if your video doesn't appear in the list right now. The conversion may be long (30 minutes for 1 hour video)";
						    	}
						    	else {
						    		messageType = "error";
									message = "Error: Not supported file format : " + extension;
						    	}
						    }
						}
					}
					catch( FileUploadException fue) {
						messageType = "error";
						message = "Error : File upload error";
					}
				}
				else {
					messageType = "error";
					message = "Error: Incorrect file upload request";
				}
				
			}
			else { // student or other -> forward to an error page
				messageType = "error";
				message = "Error: You don't have access to this page";
			}
		}
		
		// Displays the result of the upload process 
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		
	}*/
	
	private void mediaUpload(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
   		String title, description, name, firstname, date, formation, genre;
   		boolean hq=false;
   		String message = "";
		String messageType = "information";
   		
   		Calendar cal = new GregorianCalendar();        	
   	
   		title = description = name = firstname = date = formation = genre = "";

   		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
   		Date d = new Date();
   		boolean continuer=true;
   	
   		//TODO Establishment, to do
		//String estab = request.getParameter("estab");
		
   		//String casUser = (String) session.getAttribute(edu.yale.its.tp.cas.client.filter.CASFilter.CAS_FILTER_USER);
   		
   		/* If the user is authenticated */
		//if( casUser != null) {
		//	HashMap<String, String> map = service.getUserInfos(casUser,estab); // retrieves the info from the user
			
			/* Determines wether the user is a student or a teacher */
		//	String idrole = map.get("idrole");
		//	name = map.get("nom");
		//	firstname = map.get("prenom");
		
			
		//	if( idrole.equals("1")) { // teacher -> forward to the upload page
								
				/* Tests if the request is a good media upload request */
		   		
				
				if( ServletFileUpload.isMultipartContent(new ServletRequestContext(request)) ) {
					
					try {
						/* Prepares to parse the request to get the different elements of the POST */
						FileItemFactory factory = new DiskFileItemFactory();
						ServletFileUpload upload = new ServletFileUpload(factory);
						List<FileItem> items = upload.parseRequest(request);
						
						/* Processes the different elements */
						Iterator<FileItem> iter = items.iterator();
						while (iter.hasNext() && continuer) {
						    FileItem item = (FileItem) iter.next();
				
						    /* If the element is a form field, retrieves the info */
						    if (item.isFormField()) {
						        
						    	if(item.getFieldName().equals("title"))
						        	title = item.getString("UTF8");
						    	if(item.getFieldName().equals("description"))
						        	description = item.getString("UTF8");
						        else if(item.getFieldName().equals("date")){
						        	date = item.getString("UTF8");
						        	try {
							        	d = sdf.parse(date);					        	
						        	}
						        	catch( ParseException pe) {
						        		pe.printStackTrace();
						        	}
						        	finally {
						        		cal.setTime(d);
						        	}
						        }
						        else if(item.getFieldName().equals("formation"))
						        	formation = item.getString("UTF8");
						        else if(item.getFieldName().equals("genre")) {
						        	genre = item.getString("UTF8");
						        }
						        else if(item.getFieldName().equals("name")) {
						        	name = item.getString("UTF8");
						        }
						        else if(item.getFieldName().equals("firstname")) {
						        	firstname = item.getString("UTF8");
						        }
						        else if(item.getFieldName().equals("hd")) {
						        	hq=true;
						        }
						    							    	
						    } /* If the element is a file */
						    else {
						    	String fileName = item.getName();
						    	String extension = fileName.contains(".") ? fileName.substring(fileName.lastIndexOf('.') + 1,fileName.length()) : "";
						    	
						    	/* Checks the extension of the item to have a supported file format */
						    	if( extension.equals("mp3") || extension.equals("ogg") || extension.equals("avi") || extension.equals("divx") 
						    			|| extension.equals("rm") || extension.equals("rv") || extension.equals("mp4") || extension.equals("mpg") 
						    			|| extension.equals("mpeg") || extension.equals("mov") || extension.equals("wmv") || extension.equals("mkv") || extension.equals("flv") ) {
						    	
							    	String clientIP = request.getRemoteAddr();
							    	String timing = "n-1";
							    	
							    	Course c = new Course(
											service.getNextCoursId(),
											new Timestamp(new Date().getTime()),
											null, // The type can't be set yet
											title.equals("") ? null : title,
											description.equals("") ? null : description,
											formation.equals("") ? null : formation,
											(name == null || name.equals("")) ? null : name,
											(firstname == null || firstname.equals("")) ? null : firstname,
											clientIP,
											0, // The duration can't be set yet
											(genre == null || genre.equals("")) ? null : genre,
											true,
											0,
											timing,
											null, // The media folder can't be set yet
											hq
									);
							    	
							    								    										
							    	/* Sends the creation of the course to the service layer */
							    	service.mediaUpload(c, item, getServletContext().getRealPath("/rss"), 
											rssName, rssTitle, rssDescription, serverUrl, 
											rssImageUrl, recordedInterfaceUrl, language,hq);
									
									message = "File successfully sent ! ";
									message += "Don't panic if your video doesn't appear in the list right now. The conversion may be long (30 minutes for 1 hour video)";
						    	}
						    	else {
						    		messageType = "error";
									message = "Error: Not supported file format : " + extension;
						    	}
						    }
						}
					}
					catch( FileUploadException fue) {
						messageType = "error";
						message = "Error : File upload error";
					}
				}
				else {
					messageType = "error";
					message = "Error: Incorrect file upload request";
				}
				
/*			}
			else { // student or other -> forward to an error page
				messageType = "error";
				message = "Error: You don't have access to this page";
			}
		}*/
		
		/* Displays the result of the upload process */
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		
	}
	
	private void liveState(HttpServletRequest request, HttpServletResponse response)
		throws ServletException, IOException {
		
		String message = "";
		String messageType = "information";
		
		String recordingPlace = request.getParameter("recordingPlace");
		String status = request.getParameter("status");
		
		/* Verifies that all parameters are sent and are not empty */
		if( recordingPlace != null && status != null && ! recordingPlace.equals("") && ! status.equals("")) {
			
			/* Verifies that the "status" variable contains one of the two authorized strings */
			if( status.equals("begin") || status.equals("end")) {
				recordingPlace = recordingPlace.replace('_', '.');
				service.setAmphiStatus(recordingPlace, status.equals("begin"));
				message = "Amphi : " + recordingPlace + " : " + status;
			}
			else {
				messageType = "error";
				message = "Error: possible status values for status : {begin ; end}";
			}
		} 
		else {
			messageType = "error";
			message = "Error: missing parameters: recordingPlace and status must be sent";
		}
		
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
	}
	
	private void courseAccess(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		int courseid = Integer.parseInt( (String) request.getParameter("id"));
		Course c = null;
		String genre = (String) request.getParameter("code");
		String type = (String) request.getParameter("type");
		
		try {
			if( genre == null)
				c = service.getCourse(courseid);
			else
				c = service.getCourse(courseid, genre);
			
			if( genre == null && c.getGenre() != null) { // The user tries to access to the protected course directly via the URL
				
				/* Redirects the client to the access code typing form */
				request.setAttribute("id", courseid);
				request.setAttribute("type", type != null ? type : "real");
				getServletContext().getRequestDispatcher("/WEB-INF/views/codeform.jsp").forward(request, response);
			}
			else {
				
				service.incrementConsultations(c);
				
				if( type == null || type.equals("real")) {
					/* redirection to the SMIL interface */
					request.setAttribute("courseurl", coursesUrl + c.getMediaFolder() + "/" + c.getMediasFileName() + ".smil");
					request.setAttribute("slidesurl", coursesUrl + c.getMediaFolder() + "/screenshots/");
					List<Slide> slides = service.getSlides(c.getCourseid());
					request.setAttribute("slides", slides);
					Amphi a = service.getAmphi(c.getIpaddress());
					String amphi = a != null ? a.getName() : c.getIpaddress();
					String building = service.getBuildingName(c.getIpaddress());
					request.setAttribute("amphi", amphi);
					request.setAttribute("building", building);
					if( c.getTiming().equals("n-1"))
						request.setAttribute("timing", 1);
					else
						request.setAttribute("timing", 0);
					
					/* Displays the view */
					getServletContext().getRequestDispatcher("/WEB-INF/views/recordinterface_smil.jsp").forward(request, response);
				}
				else if( type.equals("flash")) {
					/* redirection to the FlvPlay JS interface */
					String courseExtension = "";
					if( c.getType().equals("audio"))
						courseExtension = ".mp3";
					else if( c.getType().equals("video"))
						courseExtension = ".flv";
					
					request.setAttribute("courseurl", coursesUrl + c.getMediaFolder() + "/" + c.getMediasFileName() + courseExtension);
					request.setAttribute("slidesurl", coursesUrl + c.getMediaFolder() + "/screenshots/");
					request.setAttribute("course", c);
					List<Slide> slides = service.getSlides(c.getCourseid());
					request.setAttribute("slides", slides);
					Amphi a = service.getAmphi(c.getIpaddress());
					String amphi = a != null ? a.getName() : c.getIpaddress();
					String building = service.getBuildingName(c.getIpaddress());
					request.setAttribute("amphi", amphi);
					request.setAttribute("building", building);
					if( c.getTiming().equals("n-1"))
						request.setAttribute("timing", 1);
					else
						request.setAttribute("timing", 0);
					
					request.setAttribute("serverUrl",serverUrl);
					
					/* displays the .jsp view */
					getServletContext().getRequestDispatcher("/WEB-INF/views/recordinterface_flash.jsp").forward(request, response);
				}
				// TODO test HQ (high Quality
				else if( type.equals("hq")) {
					request.setAttribute("courseurl", coursesUrl + c.getMediaFolder() + "/" + c.getMediasFileName() + ".mp4");
					request.setAttribute("course", c);					
					Amphi a = service.getAmphi(c.getIpaddress());
					String amphi = a != null ? a.getName() : c.getIpaddress();
					String building = service.getBuildingName(c.getIpaddress());
					request.setAttribute("amphi", amphi);
					request.setAttribute("building", building);
					request.setAttribute("serverUrl",serverUrl);
										
					/* Displays the view */
					getServletContext().getRequestDispatcher("/WEB-INF/views/recordinterface_hq.jsp").forward(request, response);
		
				}
				else {
					String filename = coursesFolder + c.getMediaFolder() + "/" + c.getMediasFileName() + "." + type;
					
					/* Initializes the headers */
					response.setContentType("application/x-download");
					response.setHeader("Content-Disposition", "attachment; filename=" + c.getMediasFileName() + "." + type);
	
					/* Sends the file */
					OutputStream out = response.getOutputStream();
					service.returnFile(filename, out);
					
					/*String previousPage = (String) request.getSession().getAttribute("previousPage");
					if( previousPage == null)
						previousPage = "/home";
					response.sendRedirect("." + previousPage);*/
				}
			}
		}
		catch(DaoException de) {
			ResourceBundle bundle = ResourceBundle.getBundle(BUNDLE_NAME, new Locale( (String) session.getAttribute("language")));
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", bundle.getString("wrongAccessCode"));
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	private void liveAccess(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String ip = request.getParameter("amphi");
		Amphi a = service.getAmphi(ip);
		String amphi = a != null ? a.getName() : ip;
		String building = service.getBuildingName(ip);
		String url = "";
		
		url = "rtmp://" + flashServerIp + "/live&id=" + ip.replace('.', '_');
		request.setAttribute("type", a.getType());	
		
	/*	
		if( a.getType().equals("audio")) {
			url = "http://" + ip + ":" + audioLivePort;
			request.setAttribute("type", a.getType());			
		}
		else if( a.getType().equals("video")) {
			if( service.getLiveStreamType(ip, audioLivePort).equals("audio")) {
				url = "http://" + ip + ":" + audioLivePort;
				request.setAttribute("type", "audio");
			}
			else {
				url = "rtmp://" + flashServerIp + "/live&id=" + ip.replace('.','_') ;
				request.setAttribute("type", a.getType());
			}
		}	
		*/
		
		request.setAttribute("amphi", amphi);
		request.setAttribute("building", building);
		request.setAttribute("ip", ip);
		request.setAttribute("url", url);
		
		getServletContext().getRequestDispatcher("/WEB-INF/views/liveinterface.jsp").forward(request, response);
	}
	
	private void liveSlide(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String ip = request.getParameter("ip");
		String url = "../../live/" + ip.replace('.','_') + ".jpg";
		request.setAttribute("ip", ip);
		request.setAttribute("url", url);
		
		getServletContext().getRequestDispatcher("/WEB-INF/views/include/iframe_liveslide.jsp").forward(request, response);
	}
	
	private void validateCourse(HttpServletRequest request, HttpServletResponse response, String redirectUrl) 
		throws ServletException, IOException {
		
		Course c= new Course(
			Integer.parseInt(request.getParameter("courseid")),
			new Timestamp(Long.parseLong(request.getParameter("date"))),
			! request.getParameter("type").equals("") ? request.getParameter("type") : null,
			! request.getParameter("title").equals("") ? request.getParameter("title") : null,
			! request.getParameter("description").equals("") ? request.getParameter("description") : null,
			! request.getParameter("formation").equals("") ? request.getParameter("formation") : null,
			! request.getParameter("name").equals("") ? request.getParameter("name") : null,
			! request.getParameter("firstname").equals("") ? request.getParameter("firstname") : null,
			! request.getParameter("ipaddress").equals("") ? request.getParameter("ipaddress") : null,
			Integer.parseInt(request.getParameter("duration")),
			! request.getParameter("genre").equals("") ? request.getParameter("genre") : null,
			request.getParameter("visible") != null ? true : false,
			Integer.parseInt(request.getParameter("consultations")),
			! request.getParameter("timing").equals("") ? request.getParameter("timing") : null,
			! request.getParameter("mediaFolder").equals("") ? request.getParameter("mediaFolder") : null,
			request.getParameter("highquality") != null ? true : false
		);
		service.modifyCourse(c);
		
		/* Generation of the RSS files */
		if( c.getGenre() == null)
			service.generateRss(c, getServletContext().getRealPath("/rss"), rssName, rssTitle, rssDescription, serverUrl, rssImageUrl, recordedInterfaceUrl, language);
		response.sendRedirect(response.encodeRedirectURL(redirectUrl));
	}
	
	private void validateBuilding(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		if( ! (request.getParameter("name").equals("") || request.getParameter("imagefile").equals(""))) {
		
			int buildingId =  ! request.getParameter("buildingid").equals("") ? Integer.parseInt(request.getParameter("buildingid")) : 0;
			
			Building b = new Building(
				buildingId,
				request.getParameter("name"),
				request.getParameter("imagefile")
			);
			
			if(request.getParameter("action").equals("edit"))
				service.modifyBuilding(b);
			else
				service.addBuilding(b);
			response.sendRedirect(response.encodeRedirectURL("./admin_buildings"));
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "All fields must be completed");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	private void validateAmphi(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		if( ! (request.getParameter("name").equals("") || request.getParameter("ipaddress").equals(""))) {
		
			int amphiId =  ! request.getParameter("amphiid").equals("") ? Integer.parseInt(request.getParameter("amphiid")) : 0;
			
			Amphi a = new Amphi(
				amphiId,
				Integer.parseInt(request.getParameter("buildingid")),
				request.getParameter("name"),
				request.getParameter("type"),
				request.getParameter("ipaddress"),
				Boolean.parseBoolean(request.getParameter("status")),
				request.getParameter("gmapurl").equals("") ? null : request.getParameter("gmapurl")
			);
			
			String oldAmphiip = request.getParameter("oldAmphiip");
			
			if(request.getParameter("action").equals("edit"))
				service.modifyAmphi(a, oldAmphiip);
			else
				service.addAmphi(a);
			response.sendRedirect(response.encodeRedirectURL("./admin_amphis?buildingId=" + request.getParameter("buildingid")));
		}
		else {
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", "All fields must be completed");
			getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
		}
	}
	
	private void changeStyle(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		String style = request.getParameter("style");
		/* Stores the style in the session */
		session.setAttribute("style", style);
		/* Stores the style in the cookies */
		Cookie styleCookie = new Cookie("style", style);
		styleCookie.setMaxAge(31536000);
		response.addCookie(styleCookie);
		
		/* Returns to the page before the thickbox call (stored in the session) */
		String previousPage = (String) session.getAttribute("previousPage");
		if( previousPage == null)
			previousPage = "/home";
		response.sendRedirect(response.encodeRedirectURL("." + previousPage));
	}
	
	private void changeLanguage(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		String language = request.getParameter("language");
		/* Stores the language in the session */
		session.setAttribute("language", language);
		/* Stores the language in the cookies */
		Cookie languageCookie = new Cookie("language", language);
		languageCookie.setMaxAge(31536000);
		response.addCookie(languageCookie);
		
		/* Returns to the page before the thickbox call (stored in the session) */
		String previousPage = (String) session.getAttribute("previousPage");
		if( previousPage == null)
			previousPage = "/home";
		response.sendRedirect(response.encodeRedirectURL("." + previousPage));
	}
	
	private void univrCreation(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String message = "Veuillez suivre les indications à l'écran";
		String messageType = "information";

		int courseId = service.getNextCoursId();
		
		/* Retrieves the parameters sent by Univ-R */
		/* (parameters sent in LATIN9) */
		request.setCharacterEncoding("LATIN9");
		
		String uid = request.getParameter("uid");
		String uuid = request.getParameter("uuid");
		String groupCode = request.getParameter("codegroupe");
		
		String estab = request.getParameter("estab")!=null ? request.getParameter("estab") : "";
		
		String ip = request.getParameter("ip");
		
		String description = request.getParameter("description");
		String title = request.getParameter("titre");
		String genre = request.getParameter("genre");
		
		/* Verifies that all parameters were sent */
		if( uid != null && uuid != null && groupCode != null && ip != null && (! groupCode.equals("")) && (! ip.equals("")) && estab!=null) {
		
			/*
			System.out.println("ID du cours : " + courseId );
			System.out.println("User ID : " + uid );
			System.out.println("UUID : " + uuid );
			System.out.println("Code groupe : " + groupCode);
			System.out.println("ESTAB : " + estab );
			System.out.println("Titre : " + title );
			System.out.println("Description : " + description);
			System.out.println("IP : " + ip );
			System.out.println("Genre : " + genre);
			*/
			
			if( service.getAmphi(ip) != null) {
				
				try {
					
					int user = Integer.parseInt(uid);
					int group = Integer.parseInt(groupCode);
					
					/* If the user is authorized, verifies his rights for the course */
					if( service.isUserAuth(user, uuid,estab)) {
												
						HashMap<String, String> map = service.getUserInfos(user,estab);
						String name = map.get("nom");
						String firstname = map.get("prenom");
						String formation = service.getGroupName(Integer.parseInt(groupCode),estab);
						
						String msg = "(id:" + courseId + ")";
						String clientResponse = service.sendMessageToClient(msg, ip, clientSocketPort);
						
						
						/* If the client is not already recording */
						if( clientResponse.indexOf("!!! already recording !!!") == -1 ) {

							Course c = new Course(
									courseId,
									new Timestamp(new Date().getTime()),
									null, // The type can't be set yet
									title.equals("") ? null : title,
									description.equals("") ? null : description,
									formation.equals("") ? null : formation,
									name.equals("") ? null : name,
									firstname.equals("") ? null : firstname,
									ip,
									0, // The duration can't be set yet
									genre.equals("") ? null : genre,
									false,
									0,
									null, // The timing can't be set yet
									null, // The media folder can't be set yet
									false
							);
							
							Univr u = new Univr(courseId, user, group,estab);
							
							service.addUnivrCourse(c,u);
						}
						else {
							messageType = "error";
							message = "Error: The client already recording ";
							message += clientResponse;
							System.out.println(clientResponse);
						}
					}
					else {
						messageType = "error";
						message = "Error: User not authenticated";
					}
				}
				catch( NumberFormatException nfe) {
					messageType = "error";
					message = "Error: Wrong parameters";
					System.out.println("Wrong parameters !");
					System.out.println( nfe.toString());
				}
				catch( Exception e ) {
					messageType = "error";
					message = "Error: client connection problems";
					System.out.println("client connection problems");
					System.out.println( e.toString() );
					e.printStackTrace();
				}
			}
			else {
				messageType = "error";
				message = "Error: Amphi unknown";
				System.out.println("amphi unknown !");
			}
		}
		else {
			messageType = "error";
			message = "Error: Wrong parameters";
			System.out.println("Wrong parameters");
		}
		
		request.setAttribute("messagetype", messageType);
		request.setAttribute("message", message);
		getServletContext().getRequestDispatcher("/WEB-INF/views/message.jsp").forward(request, response);
	}
	
	private void univrCourseAccess(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
		
		String message = "";
		String forwardUrl = "/WEB-INF/views/recordinterface_smil.jsp";
		
		String id = request.getParameter("id");
		String uid = request.getParameter("uid");
		String uuid = request.getParameter("uuid");
		//TODO Etablishment, to do
		String estab = request.getParameter("estab")!=null ? request.getParameter("estab") : "";
		
		/* Verifies that all parameters were sent */
		if( id != null && uid != null && uuid != null && estab!=null) {
		
			try {
				int courseId = Integer.parseInt(id);
				int userId = Integer.parseInt(uid);
				
				/* If the user is logged in, verification of his rights for the course */
				if( service.isUserAuth(userId, uuid,estab)) {
					
					if ( service.hasAccessToCourse(userId, courseId,estab)) {
						
						Course c = null;
						c = service.getCourse(courseId);	
						service.incrementConsultations(c);
						
						/* redirection to the visualization interface */
						request.setAttribute("courseurl", coursesUrl + c.getMediaFolder() + "/" + c.getMediasFileName() + ".smil");
						request.setAttribute("slidesurl", coursesUrl + c.getMediaFolder() + "/screenshots/");
						List<Slide> slides = service.getSlides(c.getCourseid());
						request.setAttribute("slides", slides);
						Amphi a = service.getAmphi(c.getIpaddress());
						String amphi = a != null ? a.getName() : c.getIpaddress();
						String building = service.getBuildingName(c.getIpaddress());
						request.setAttribute("amphi", amphi);
						request.setAttribute("building", building);
						if( c.getTiming().equals("n-1"))
							request.setAttribute("timing", 1);
						else
							request.setAttribute("timing", 0);
						
					} else {
						message = "Error: access refused";
						request.setAttribute("messagetype", "error");
						request.setAttribute("message", message);
						forwardUrl = "/WEB-INF/views/message.jsp";
					}	 	
				}
				else {
					message = "Error: user don't authentificate";
					request.setAttribute("messagetype", "error");
					request.setAttribute("message", message);
					forwardUrl = "/WEB-INF/views/message.jsp";
				}
			}
			catch( NumberFormatException nfe) {
				nfe.printStackTrace();
				message = "Error: wrong parameters (number format)";
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", message);
				forwardUrl = "/WEB-INF/views/message.jsp";
			}
			catch( DaoException de) {
				de.printStackTrace();
				message = "Error: course " + id + " unknown";
				request.setAttribute("messagetype", "error");
				request.setAttribute("message", message);
				forwardUrl = "/WEB-INF/views/message.jsp";
			}
		}
		else {
			message = "Error: wrong parameters";
			request.setAttribute("messagetype", "error");
			request.setAttribute("message", message);
			forwardUrl = "/WEB-INF/views/message.jsp";
		}
		
		/* If an error has occured, diplays an error message */
		getServletContext().getRequestDispatcher(forwardUrl).forward(request, response);
	}
	
}
